#+POSTID: 3191
#+DATE: [2013-02-14 Thu 10:43]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: 
#+TAGS:
#+DESCRIPTION:
#+TITLE: Front Page Slider in Required+ Theme

OK, we talked about this last week but I'm not sure you guys were paying attention.  The folks at Required+ very generously [[https://github.com/wearerequired/required-foundation/issues/13][responded to my request for help]] in making a front-page slider using their starter theme & the underlying capabilities of the [[http://foundation.zurb.com/][Foundation]] framework.  This turns out to be entirely doable!  As Silvan says in the issue I link to above (and which I recommend you all read), several things need to be done:

* Create a new template, and call it from the front page only
This has several steps:
- copy the full text of page.php from themes/required-foundation into themes/required-starter/front-page.php -- now you have a separate front page template that will only run on the front page.  
- Now add a line like the middle one below into front-page.php: 
#+BEGIN_SRC html
		<div id="main" class="twelve columns" role="main">
		  <?php get_template_part ('content', 'slider-img' ); ?>
			<div class="post-box">
#+END_SRC
(this fetches the contents of the file content-slider-img.php and inserts it into this part of the web page).  

* Write your slider template
We need to generate some simple html that contains all of the slides we will want presented in our slider.  The Foundation [[http://foundation.zurb.com/docs/orbit.php][Orbit Slider javascript]] will then find this HTMl and manipulate it to create the slider dynamically (see below).  

This is the most complicated step of the process, and in fact there are a couple of options for doing it.  The best option is to generate the "slides" as individual <img /> tags.  The thing about this is, you will need to do a little more work to make sure the slider looks good if this is the option you choose.  In particular, you need to make sure that all the images being shown in the slider are *the same size and shape*, or they will end up off-center and weird-looking.  Fortunately, there is a solution to that issue (see "Tweaks", below).  Here's the code you will need if you want to do things this way:

#+BEGIN_SRC php
<?php
/* a short template to generate the front-page slider from content */
/* Creates individual <img /> tags for each slide.  Requires the
   "fluid" attribute to be set to "true" rather than, say, "16x9"
   in javascripts/child-theme.js.
 */

// Prepare the args for the query
$args = array(
    'post_type' => array( 'post', 'page' ),
    'meta_key' => 'req_slider_checkbox',
    'meta_value' => '1',
    'orderby' => 'date',
    'order' => 'DESC',
    'posts_per_page' => 3
);
// Fire the query
$slider_query = new WP_Query( $args );

// Check for posts in the query
if ( $slider_query->have_posts() ) :
?>
<div id="slider-home" class="row"><!-- Slider -->
    <div class="twelve columns">
        <div id="slider">
            <?php while ( $slider_query->have_posts() ) : $slider_query->the_post();

                if ( has_post_thumbnail() ) { // Check for an post thumbnail
		  $this_id = get_the_ID(); // we use this value so many times might as well not run the funtion each time
                    $source = wp_get_attachment_image_src( get_post_thumbnail_id( $this_id ), 'slider-16x9' ); // Change the size according to the registered image sizes you have 'thumbnail|medium|large|full' and any custom sizes you have created in functions.php.
		    $tiny_thumb = wp_get_attachment_image_src( get_post_thumbnail_id( $this_id ), 'slider-thumb' ); // if we use thumbnails, which are broken right now

                }
            ?>
   <div data-thumb="<?php echo $tiny_thumb[0]; ?>" data-caption="#caption-<?php echo $this_id; ?>" id="slide-<?php echo $this_id; ?>"  >
                <?php the_post_thumbnail('slider16x9'); ?>
              </div> <!-- /slide-ID --> 
              <span class="orbit-caption" id="caption-<?php echo $this_id; ?>">
                 <a href="<?php the_permalink(); ?>"> 
                   <h3><?php the_title(); ?></h3> 
                   <?php the_excerpt(); ?> 
                 </a>
              </span> <!-- /orbit-caption span -->

            <?php endwhile; ?>
        </div>  <!-- /slider -->

   </div> <!-- twelve columns div -->
</div><!-- / slider-home -->
<?php endif; wp_reset_postdata(); ?>
#+END_SRC

If the tweaks I discuss below seem too complicated, you can create the slider in a somewhat more roundabout way, using empty divs with custom background images!  This is a dirty hack and leads to some complications, but it is still legitimate.  Here's how you would do it that way:

#+BEGIN_SRC php
<?php
/* a short template to generate the front-page slider from content */
/* puts images in the BACKGROUND of the slider element rather than 
   generating <img /> tags for each image.  Requires the use fluid: attribute
   to be set to (say) 16x9 in javascripts/child-theme.js, rather than 
   "true".  
*/

// Prepare the args for the query
$args = array(
    'post_type' => array( 'post', 'page' ),
    'meta_key' => 'req_slider_checkbox',
    'meta_value' => '1',
    'orderby' => 'date',
    'order' => 'DESC',
    'posts_per_page' => 3
);
// Fire the query
$slider_query = new WP_Query( $args );

// Check for posts in the query
if ( $slider_query->have_posts() ) :
?>
<div id="slider-home" class="row"><!-- Slider -->
        <div id="slider">
            <?php while ( $slider_query->have_posts() ) : $slider_query->the_post();

                $slide_bg_css = ''; // We need this later, if we have a background image

                if ( has_post_thumbnail() ) { // Check for a post thumbnail
		  $this_id = get_the_ID(); // we use this value so many times might as well not run the funtion each time
                    $source = wp_get_attachment_image_src( get_post_thumbnail_id( $this_id ), 'full' ); // Change the size according to the registered image sizes you have 'thumbnail|medium|large|full'
		    $tiny_thumb = wp_get_attachment_image_src( get_post_thumbnail_id( $this_id ), 'slider-thumb' ); // if we use thumbnails, which are broken right now
                    $slide_bg_url = $source[0]; // The URI is always the first argument here
		    // this css uses the image as a background.  
                    $slide_bg_css = ' style="background-image: url(' . $slide_bg_url . '); background-position:center; background-repeat:no-repeat"';

                }
            ?>
   <div data-thumb="<?php echo $tiny_thumb[0]; ?>" data-caption="#caption-<?php echo $this_id; ?>" id="slide-<?php echo $this_id; ?>" <?php echo $slide_bg_css; ?> onclick="location.href='<?php the_permalink(); ?>';"  >
              </div> <!-- /slide-ID --> 
              <span class="orbit-caption" id="caption-<?php echo $this_id; ?>">
                 <a href="<?php the_permalink(); ?>"> 
                   <h3><?php the_title(); ?></h3> 
                   <?php the_excerpt(); ?> 
                 </a>
              </span> <!-- /orbit-caption span -->

            <?php endwhile; ?>
        </div>  <!-- /slider -->


</div><!-- / Slider -->
<?php endif; wp_reset_postdata(); ?>
#+END_SRC

In fact you, can even try both out at once.  Simply create two files in your child theme directory, "content-slider-bkgrnd.php" and "content-slider-img.php" and modify front.php to call one or the other, and see which you like better.

* Make Orbit aware of your slider 
We add a tiny piece of javascript code to required-starter/javascripts/child-theme.js: 
#+BEGIN_SRC javascript
    $('#slider').orbit({
        // fluid: '16x6',
        fluid:true,
        timer: true,
        directionalNav: true,
        bullets: true,
        // captions: false,
        captions: true,
        animation: 'fade',
        advanceSpeed: 6000,          // if timer is enabled, time between transitions
        pauseOnHover: true,        // if you hover pauses the slider
        startClockOnMouseOut: true,    // if clock should start on MouseOut
        startClockOnMouseOutAfter: 1000,
        bulletThumbs: false,
        bulletThumbsLocation: ""
    });
    //$('#slider-home .timer').hide();
#+END_SRC

This code simply says, "look in the web page for the HTML element named 'slider'.  Then, apply the orbit slider code to that element.  And while you're at it, here are some more specific instructions for you:  resize the slider dynamically depending on the size of the screen we're viewing form; put a timer & arrow-based navigation on the slider; use bullets and captions; etc." You can learn more about the options and what they mean from the [[http://foundation.zurb.com/docs/orbit.php][Foundation Orbit docs]].  

* Tweaks
To get this to look really good, we still have to do a couple of little things. 
** Add new image sizes. 
When you upload an image to wordpress, it automatically creates a whole set of "thumbnail" images of different sizes, to use in different contexts.  So, you have the "full" image, and then (by default, "thumbnail", "Medium", and "large" sizes.  However, you can create your own sizes if you want!  And if you're using the <img /> tag method described above, it's a really good idea to do so.  You might want to think about the dimensions for this -- do you want a really long, skinny picture -- so that it looks almost like a website banner?  Or would you like something almost squarish, suitable perhaps for a slider that is placed to the left or the right of some explanatory text?  The dimensions I've chosen is sort of middling, but you can modify it easily.  All we do is add one little line to the section "function required_theme_setup" in "functions.php" file in themes/required-starter:
#+BEGIN_SRC php
*/
function required_starter_themesetup() {

	load_child_theme_textdomain( 'requiredstarter', get_template_directory() . '/languages' );

	// Register an additional Menu Location
	register_nav_menus( array(
		'meta' => __( 'Meta Menu', 'requiredstarter' )
	) );

	// Add support for custom backgrounds and overwrite the parent backgorund color
	add_theme_support( 'custom-background', array( 'default-color' => 'f7f7f7' ) );
	
	// add an image size for slider
	add_image_size( 'slider-16x9', 960, 540, true ); // Hard Crop Mode
	add_image_size( 'slider-thumb', 32, 18, false ); // Soft Crop Mode
}
#+END_SRC
You can see I actually have two "add_image_size lines here -- one for the main image, and one intended to be used for tiny slider thumbnails (that isn 't working right now though!).  
** Regenerate image Thumbs
These new thumbnails will be applied to all NEW images uploaded to the site.  The old ones, though, won't have them.  If you already have a bnuch of images on your site, you can install the "regenerate Thumbnails" plugin, which will regenerate all your thumbnails for you.  You can deactivate and then delete it after you're done with the development of your site, so your lcients don't have to think about it.  
*** CSS
You may want some CSS to make the captions look nice & perhaps add a border or something to the slider div.  This is what I've put in my own style.css file to prettify my slider:
#+BEGIN_SRC css
/* Slider Tweaks  */
div.orbit-caption h3, div.orbit-caption p {
    color:white;
}
#+END_SRC
Can you tell what that does? Try to figure it out, it's trivially simple.  

OK, that's all for now!  Keep on trucking!
