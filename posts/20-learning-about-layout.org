#+BLOG: hh
#+POSTID: 731
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil prop:nil
#+OPTIONS: stat:t tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+TITLE: Thinking about Layout
#+DATE: <2015-02-26 Thu>
#+AUTHOR:
#+EMAIL: matt@osskil.lan
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.4.1 (Org mode 8.3beta)


Daniel has requested that we spend some time this week thinking about site layout.  This is a somewhat broad question, actually, so let's divide it into component parts.  

* Basics
At the most basic level, layout, like other elements of presentation is largely controlled by CSS, and the CSS is, for us, generated from the Foundation SCSS.  So, for instance, the height of the topbar is set by the variable ~$topbar-height~ near line ~1378~ of ~_settings.scss~.  The width of rows is set by ~$row-width~ (line 82 or so). The number of columns, by ~$total-columns~ (line 12).  Using CSS, you can customize the ~float~ value of different components to control whether they appear on the left or right of their containing element, while ~padding~ and ~margin~ control the distance between content and border, and between border and surrounding elements.  

So, to understand what's happening in the page layout, at the most basic level, you need to have a grasp of the basic CSS classes provided by the Foundation framework within which we work.  You can learn all about them [[http://foundation.zurb.com/docs][here]], and in the rest of the documentation, eg. [[http://foundation.zurb.com/docs/components/grid.html][check here for the grid]].  Also check out the [[http://codepen.io/ZURBFoundation/pen/olduj][Foundation Codepen examples]], which show their grid and some other featues in action. Showing just the most basic example:

#+BEGIN_SRC html
  <div class="row">
    <div class="small-12 medium-3 columns" id="sidebar">
      This div contains the sidebar
    </div>
    <div class="small-12 medium 9 columns" id="main">
      While this wone contains the main content.  
    </div>
  </div>
  <div class"row">
    Everything in this row will appear below everything in the row above.  
  </div>
#+END_SRC

You should be able to figure out the layout just by looking at the div class names -- can you?  

* Wordpress Layout in Templates

Or course, to work properly, CSS requires elements to be labelled with the right classes.  We create those labels when we generate the HTML for a post or page. But where does the HTML come from?  From the PHP templates, as you will remember.  If you want the same layout on every page -- and for most things, you do -- then you should set the layout in the template.  So for instance, we might, as a trivial example, have this:
#+BEGIN_SRC php
  <div class="row">
  <?php get_sidebar ?>
    <div class="small-12 medium 9 columns" id="main">
      <?php the_title ?>
      <?php the_content ?>
    </div>
  </div>

#+END_SRC

So, in order to change the layout, you will need to modify template files directly.  Sometime,s this will just mean adding CSS classes to existing ~div~ elements; more often, you will be inserting additional wordpress "template tags" -- that is, wordpress php functions that generate specific HTML.  

I could be more specific, but you need to decide what layout elements you want.  For instance, do you want to include extra widgets, either in the footer, the sidebar, or elsewhere?  [[http://wpshout.com/need-know-making-widget-areas-wordpress-themes/][Here is one of many web tutorials]] that tell you how to do this.  Do you want to position a featured image somewhere on the page? [[http://codex.wordpress.org/Function_Reference/the_post_thumbnail][The documentation for the_post_thumbnail]] has lots of info about how to do that.  

It would be helpful if you guys could ask some specific questions in the comments to this post -- then I can update with relevant examples.

* Sidebar Widgets
Mike asked how to display a Twitter feed in a page. This is best thought of as part of a more general question: how do you create a box of content that (a) is displayed in a way that separates it visually form the main part of your post, and (b) contains automatically generated content, that doesn't have to be curated by a user or editor?  

The answer is: use a [[http://codex.wordpress.org/WordPress_Widgets][widget]]. From a user's perspective, widgets are small bits of information that appear in a sidebar or other segregated area of a website (like the footer, for instance).  From an administrator's perspective, widgets are "gadgets" that you can drag and drop into your theme's sidebar areas; when the sidebar displays (in any template that calls ~<?php get-sidebar(); ?>~), it will call up those widgets.

From a developer's perspective, widgets are bits of code that run and produce HTML whenever they are hooked into the sidebar.  [[http://code.tutsplus.com/articles/building-custom-wordpress-widgets--wp-25241][Here is one tutorial]] that shows you how to code them; [[http://codex.wordpress.org/Widgets_API#Developing_Widgets][here is the official documentation]]; and here is [[http://automattic.com/code/widgets/plugins/][one more resource  that may be helpful]]. 

However, in the case of a twitter feed, you already have a zillion options.  [[https://wordpress.org/plugins/easy-twitter-feed-widget/][Easy Twitter Feed widget]] is one; and [[http://www.elegantthemes.com/blog/resources/best-twitter-widget-plugins-for-wordpress][here is a list of some of the most popular alternatives]]. 

* Editing layout in the Visual editor
It is also possible to control layout on a page-by-page basis by adding css classes to elements within a post.  I have done this in my syllabus -- I created new rules for a  css class, ~org-upload~, and then added that class to all the images in the "Course Outline" section.  You can do this pretty easily from within the html editor.  But in the visual editor, it's pretty difficult.  First you need to  make the visual editor aware of the new styles -- tell it how they look, so that your preview looks as it should.  Then, in addition, you need to provide some way for users to access the new style from the user interface.  This is pretty complicated, unfortunately!  You can read all about it [[http://codex.wordpress.org/Function_Reference/add_editor_style][here]] and [[http://codex.wordpress.org/TinyMCE_Custom_Styles][here]].  Fortunately thre is a plugin that will do *much* of the work for you -- you can find it [[https://wordpress.org/plugins/tinymce-and-tinymce-advanced-professsional-formats-and-styles/][here]].  However, you will still need to /define/ the new styles and /make the editor aware of them/.  But this is simple CSS -- if you want to do this, indicate in the comments section and  will work with you to create appropriate stiles.  


