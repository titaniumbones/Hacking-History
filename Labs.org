#+POSTID: 67
# #+DATE: [2013-10-08 Tue 09:53]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: labs
#+TAGS:
#+PARENT: 5
#+DESCRIPTION:
#+TITLE: Labs And Notes
#+PROPERTY: PARENT 10
#+BIND: org-export-publishing-directory "hh-hugo/content/article/"
#+HUGO_BASE_DIR: ./hugoplayground
#+HUGO_SECTION: lab
#+HUGO_MENU:  :menu main :weight 50 :parent Labs 

#+BEGIN_SRC emacs-lisp
  (org-map-entries
   '(lambda ()
      (let* ((entry (org-element-at-point))
             (level (org-element-property :level entry))
             (commentedp (org-element-property :commentedp entry))
             (tags (org-element-property :tags entry))
             (export-file (or (org-element-property :EXPORT_FILE_NAME entry)
                               (downcase
                                (replace-regexp-in-string
                                 ":" "" (replace-regexp-in-string
                                         "[[:space:]]" "-"  (org-element-property :raw-value entry))))
                               )))
        (org-set-property "EXPORT_FILE_NAME" export-file))))
#+END_SRC

#+RESULTS:


* Labs and Notes  
:PROPERTIES:
:ID:       o2b:1570b619-d117-4f34-bd4e-a618bba6ea37
:POST_DATE: [2016-09-11 Sun 09:28]
:POSTID:   10
:EXPORT_FILE_NAME: labs-and-notes
:END:
In general, each weekly seminar also includes a "lab" component in which we explore technical skills. See the individual Lab pages for more information.
* Lab 01: Getting Started
:PROPERTIES:
:PARENT:   10
:ID:       o2b:d84b0692-6129-4e96-931a-0585c628c57e
:POSTID:   13
:EXPORT_FILE_NAME: lab-getting-started
:END:

Welcome to /Hacking History/.

In today's lab we learn (or recall) a little bit about some of the tools we'll be using during the class.  They are:

- Markdown
- Github
- Zotero

Next week we will start learning about HTML, but for today it's all just fun. 

** Mountain-Please
:PROPERTIES:
:END:
This is a fun excercise to introduce everyone to the practice of hacking. It will also get you used to using Github, one of the fundamental tools of open-source software development.  

My friend [[https://twitter.com/k88hudson?lang=en][Kate Hudson]] created a simple github training exercise two years ago for some of my other students.  It was really fun, so I modified it for us (twice):
1. [[https://github.com/join][Sign Up for a Github Account]] (or sign in if you already have an account)
2. Navigate to [[https://github.com/titaniumbones/mountain-please][my mountain-please repository]]
3. Take a quick look at the [[https://github.com/titaniumbones/heroes-please/blob/master/README.md][README]].  Can you understand it? Maybe we need to add some extra instructions (like, what does ~npm install -g~ mean? And where do those [[http://www.emoji-cheat-sheet.com/][emoji]] come from?) What does the program do, and (if you can get this far) how does it work?
4. Have you found where the Heroes live?
5. Add a new hero *from inside Github itself(!)* simply by navigating to the right spot and clicking the ~+~ button.  (see the picture below)
   - Be sure to name the file "some-persons-name.md" so that everyone knows it's written in Markdown
   - follow markdown syntax in writing your recipe (see [[https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet][this cheatsheet]], especially the sections on Headings, Lists, and Links)
   - When you save the file, Github will *automatically create a forked repository under your account!* Magic.
   [[./Images/github-add-file.png]]
6. File a pull request with me by navigating back to the main page of your repository (~github.com/your-user-name/heroes-please/~) and hitting the Github pull request button: [[./Images/github-pull-request.png]]

** HTML Preview
:PROPERTIES:
:END:
If we have time at the end, let's take a look at [[http://jsbin.com/onopaz/7/edit][this exercise]] which is planned for next week.  

Also, this is an opportunity to download and install the [[http://atom.io][Atom text editor]] which we will be using in coming weeks.  
* Lab 02: Understanding HTML
:PROPERTIES:
:PARENT:   10
:ID:       o2b:4cadb43d-7585-4fd0-9e68-00308148320f
:POST_DATE: [2016-09-20 Tue 09:05]
:POSTID:   88
:EXPORT_FILE_NAME: lab-understanding-html
:END:
One of the goals of this week is to help you think of the Web as a protocol-driven infrastructure.  The language in which that infrastructure operates is called [[http://en.wikipedia.org/wiki/HTML][HTML]]. Like a traveller in a foreign country, you may not need to be fluent in this language, but if you know just a little bit then you'll be much more comfortable.  In this exercise we will introduce an online tool called [[http://jsbin.com/welcome/1/edit][JSBin]], now one of many such tools available online, and somewhat similar to the [[http://codeacademy.net][Codeacademy]] website you will be using for your assignments.

I strongly advise you to also take this opportunity to download the [[http://atom.io][Atom text editor]], as well. Further instructions are on the Tools page.  
** Tags
:PROPERTIES:
:END:
An HTML Document is composed of [[http://en.wikipedia.org/wiki/HTML_element][elements]] marked off by [[http://www.w3schools.com/tags/default.asp][tags]].  The elements look like this:  
#+BEGIN_SRC html
<p>This is a paragraph</p>
#+END_SRC
Note the opening and closing tags, which surround the text you want to have marked up.

*** Important tags
Here are a few examples of important tags, though there are many, many more in current versions of HTML.  
**** Document Structure
Certain tags exist solely to lend *structure* to a document.  
#+BEGIN_SRC html 
  <html>
    <head></head>

    <body>
      <header></header>

      <article>
        <div>
          <span></span>
        </div>
      </article>

      <footer></footer>

    </body>
  </html>
#+END_SRC

**** Text Properties
Others give instructions for emphasizing text
#+BEGIN_SRC html -n
  <b>bold</b> <strong>strong</strong>
  <i>italic</i> <em>emphasis</em>
#+END_SRC
**** Text Functions
Still others define pieces of structure in a functional way that generally also affects the way text will look on your screen.
#+BEGIN_SRC html -n
  <h1>This is a top-level Heading</h1>
  <h2>While this is a lower-level heading</h2>
  <p>..and this is a mere paragraph</p>
  <ul>
    <li>This is a list item</li>
    <li>And this is a second item</li>
  </ul>

  <ol>
    <li>this is a different kind of list</li>
    <li>you'll see the differences soon</li>
  </ol>
#+END_SRC

**** Linking
The fundamental, breathtaking feature of the web is its capacity to create links between documents, images, media sources, etc., with absolute disregard for where those resources are physiclaly stored.  The syntax for making a link is as follows 

#+BEGIN_SRC html -n
  <a href="" target="">Text </a>
  <img src="" alt="" title=""/>
  <video>
    <source src="" type="">
  </video>
  <script src="" lang=""/>
#+END_SRC

Figure out what these mean by browsing on w3schools. Work especially hard at the <a> tag.  Hint:  the standard syntax is <a href="link">Text</a> and there are plenty of instances in the code below.

*** Exercise 0                                                       
Navigate to [[http://jsbin.com/onopaz/edit?html,output][this page]].  This is the JSBin editor, an online tool for inspecting code.  
*** Exercise 1
First, let's quickly compare the text of an old post of mine:

#+BEGIN_QUOTE
The WWW as Public Sphere
Posted on September 21, 2010 by admin

Just a few quick words about the readings this week, which concern the idea of the “Public Sphere“. This phrase is rooted in ideas about enlightenment that stretch at least back to Immanuel Kant. The analyses of Jürgen Habermas (SEP entry), in particular, developed the idea of a sort of virtual space of critical discussion...

Some of the features of this "authentic public sphere" would be 
- a space free from political repression
- a space accessible to all members of society
- a form of discourse in which ideas are evaluated on their own merits exclusively, and not arbitrated based on some set of characteristics of the speaker


#+END_QUOTE

with the HTML code that generates what you would see on your screen if you went to the website from that year: 

#+BEGIN_SRC html -n
<div id="post-77" class="post-77 post type-post hentry category-notes-for-class tag-publicsphere">
					<h1 class="entry-title">The WWW as Public Sphere</h1>

					<div class="entry-meta">
						<span class="meta-prep meta-prep-author">Posted on</span> 
<a href="http://www.hackinghistory.ca/2010/09/21/the-www-as-public-sphere/" title="11:03 am" rel="bookmark"><span class="entry-date">September 21, 2010</span></a> <span class="meta-sep">by</span> 
<span class="author vcard"><a class="url fn n" href="http://www.hackinghistory.ca/author/admin/" title="View all posts by admin">admin</a></span>					</div><!-- .entry-meta -->

<div class="entry-content">
	<span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Adc&amp;rfr_id=info%3Asid%2Focoins.info%3Agenerator&amp;rft.title=The WWW as Public Sphere&amp;rft.aulast=Price&amp;rft.aufirst=Matt&amp;rft.subject=Pre-class notes&amp;rft.source=Hacking History (His455)&amp;rft.date=2010-09-21&amp;rft.type=&amp;rft.format=text&amp;rft.identifier=http://www.hackinghistory.ca/2010/09/21/the-www-as-public-sphere/&amp;rft.language=English"></span>

<div class="sticky_post"><p> Just a few quick words about the readings this week, which concern the idea of the  &#8220;
<a href="http://en.wikipedia.org/wiki/Public_sphere">Public Sphere</a>&#8220;.  This phrase is rooted in ideas about <a href="http://plato.stanford.edu/entries/enlightenment/">enlightenment</a> that stretch at least back to 
<a href="http://en.wikipedia.org/wiki/Immanuel_Kant">Immanuel Kant</a>.  The analyses of 
<a href="http://en.wikipedia.org/wiki/J%C3%BCrgen_Habermas">Jürgen Habermas</a> 
(<a href="http://plato.stanford.edu/entries/habermas/">SEP entry</a>), in particular, developed the idea of a sort of virtual space of critical discussion  </p>

</div>
											</div><!-- .entry-content -->
#+END_SRC

They look pretty different, right?  Now, paste the text-only version into the HTML tab in [[http://jsbin.com/waxufekequte/2/edit][this JSBin page]].  

Figure out how to accomplish the following tasks:
1. Make the title "The WWW and the Public Sphere" into a heading.
2. Add a link to "http://www.hackinghistory.ca/author/admin/" to the word "admin" in the second line.
3. Italicize the date line.
4. Organize the elements so that the appropriate content is nn the <header> tag, and the rest in the "article".

These are all pretty easy, you can figure them out either by inspecting the marked-up version I reproduced here, or following the w3schools HTML tutorials.  
 
*** Styles
Styles in HTML are pretty complex, see the [[http://www.w3schools.com/html/html_css.asp][HTML style tutorials]] on w3schools.  Check out their very quick description of [[http://www.w3schools.com/css/css_intro.asp][css]].  
**** Exercise 2
    Go back to your TryIt experiment at w3schools.  Can you make the text render in the same styles that are used by the website?  There's a clue in the <head> element of any page from the site.  Hint: search for "css" in the sourcecode...
*** Scripts
Though HTML is the language of the web, modern HTML (HTML 4, HTML 5) have "translators" of a sort that allow other languages to run inside the web page.  this is actually incredibly powerful, and allows amazing things that were unheard of in the early days of the web, like dynamically-generated lists, moving images, the embedding of video and so forth.  You don't have to know how to script (I can't really use javascript, for instance) but you should understand that scripting is what makes a lot of today's web work the way it does.  
**** Exercise 3
:PROPERTIES:
:END:
Inspect the source code of three complex pages on the web and find every instance of a script tag.  Note anything you think is interesting about it.  


** Hacking your way to HTML mastery!
*** Tools!
- *View source.* When you right click on a web page in any modern browser, you will see a 'view source' option.
- *developer tools*.  The Developer Tools for [[https://developer.chrome.com/devtools][Chrome]] and [[https://developer.mozilla.org/en/docs/Tools][Firefox]] are both amazing.  They allow you to temporarily change the code (HTML, CSS, and Javascript) running on any website, and thus test out your ideas for changes.  We will use this tool *A LOT* over the course of the year.  
- *[[http://jsbin.com][jsbin]]*. The awesome real-time html/javascript previewer.
*** Tutorials
- [[http://codeacademy.com][Codeacademy]] may have the best intro to HTML sequence
- [[http://w3schools.com/][W3 Schools]] provides excellent tutorials.
- [[https://developer.mozilla.org/en/HTML][The Mozilla Developers' Network HTML Reference]] is where I go when I need a detailed explanation of something.  
* Lab 03: CSS and Web Styles
:PROPERTIES:
:ID:       o2b:2a926b2c-7fda-4ae5-88b3-0837ce62757a
:PARENT:   10
:POST_DATE: [2016-09-20 Tue 09:28]
:POSTID:   94
:EXPORT_FILE_NAME: lab-css-and-web-styles
:END:
Last week we experimented with HTMl and dipped our toes into CSS and styles.  In your final projects, much of your coding time will be spent trying to get your site to look the way you want it to.  If you have a firm understanding of CSS (and of where to look for more info when you're having trouble!), this will be a lot easier.

You already know about the [[http://www.codecademy.com/courses/web-beginner-en-TlhFi/0/1?curriculum_id=50579fb998b470000202dc8b][Codeacademy]] CSS offerings.  Two other helpful tutorial sites are [[http://learn.shayhowe.com/][shayhowe]] and  [[http://learnlayout.com/][Learn Layout]], to which I'll be referring later; and there are many other resources available on the web.  

** CSS Basics

CSS is the [[http://en.wikipedia.org/wiki/Cascading_Style_Sheets][Cascading Style Sheets]] Language; it is a powerful tool for controlling the appearance of web pages (and sometimes other documents, too).  It works in the following way:

- a web page links to a stylesheet
- the stylesheet instructs the browser as to how to display various kinds of web pages
- the browser then renders the page according to those instructions.  

Sometimes when you have a really slow Internet connection, you will see a very ugly, cluttured web page before a smooth, clean, modern-looking website loads.  That's because your browser has loaded the web page but is having trouble accessing the stylesheet.  E.g., here is the New York Times with and without CSS:  
#+ATTR_HTML: :class compare
[[file:~/HackingHistory/Images/nytimes-w-css.png]]  
#+ATTR_HTML: :class compare
[[file:~/HackingHistory/Images/nytimes-no-css.png]] 

#+ATTR_HTML: :style clear:both;
So, while HTML is responsible for the *structure and content* of a website, CSS is responsible for its *presentation*.  

** CSS Selectors


When you look at a CSS file, you will see it is divided into a bunch of stanzas, like this.  Each of these stanzas is called a "selector statement":

#+BEGIN_SRC css 
  h1 {
      color:blue;
      font-family:serif; 
      font-size:24px; 
  }

  div {
      border: 1px solid black;
  }

  div.main p {
      color:red;
  }

  #specialid {
      float:left;
  }
#+END_SRC
They all follow the same pattern: 
- first, a *selector* that identifies the elements to which these instructions will apply
- then *an open brace* "{" which marks the start of the actual instructions
- then a series of *property-value pairs*.  Each of these sets the /value/ of a particular /property/ (duh).  Note that at the end of a property, there is *always* a semi-colon!  
- finally, *a closing brace* that ends the selector declaration.

*** Selector types
Though simple in principle, CSS selectors can be confusing.  Here are some basic selector types:
- *Element* selectors:  these just give the element (like h1, p, div, span, etc.).  they apply to all elements of this type.
- *Class* selectors:  these give the name of a class attribute that an HTML element may have.  This selector will always begin with a period (".").  So for instance:
#+BEGIN_SRC html
<p class="coolpara">Some Content</p>
#+END_SRC

#+BEGIN_SRC css
.coolpara {
color:green;
}
#+END_SRC
- *ID* selector:  this addresses the element with a particular ID:
#+BEGIN_SRC html
<p id="myfave">Some Content</p>
#+END_SRC

#+BEGIN_SRC css
#myfave {
color:yellow;
}
#+END_SRC
- Finally, we have many more complex selectors.  This one here is a descendant selector: 

#+BEGIN_SRC css
div.main p {
      color:red;
  }
#+END_SRC
It addresses every p that is contained inside a div of class "main."

** Fonts, colors and borders

A lot of what we do with CSS is to set fonts and colors.  Here are some examples:

#+BEGIN_SRC css
div.main {
      color: rgb(150,150,150);
      background-color: (#b0c4ee);
      text-align: center;
      text-decoration:underline;
      font-family: "Times New Roman", Times, Serif;
      font-style:italic;
      font-size:1.25em;
      border: 4px green solid;
      border-radius:20%;
  }
#+END_SRC
There are plenty of other properties that can be set, in much the same way.

** Display: Block vs. Inline


** Box Model
One important notion to understand in CSS is the so-called "[[http://www.w3.org/TR/CSS2/box.html][Box Model]]", which accounts for the distribution of whitespace around elements.  A lot of the grief you will encounter when designing websites will come back to the box model, so it's important to learn it:  

[[http://2014.hackinghistory.ca/wp-content/uploads/2014/09/wpid-boxmodel.png]]

For each element, you have the actual content, which is surrounded by the *padding*, surrounded in turn by the *border*, and once again surrounded by the *margin.*  So for instance, try this code in JSBin:

#+BEGIN_SRC css 
.simple {
  width: 500px;
  margin: 20px auto;
  border 1px red solid;
}

.fancy {
  width: 500px;
  margin: 20px auto;
  padding: 50px;
  border: 10px blue solid;
}
#+END_SRC

~<div class="fancy">~ will look a lot bigger than ~<div class="simple">~, even though they are nominally the same size!  

There are two ways to deal with this:  
1. subtract the size of the padding and border from your width values
2. use the new "box-sizing:border-box" attribute.  This will do all the math for you.  

** Positioning

This is a difficult subject.  When you are dealing with lots of different screen sizes and resolutions, and different devices with different fonts installed, etc., it is not trivial to position every element precisely where you want it.  You will find a lot of your teeth-gnashing time is spent trying to get various columns of content to line up pretty, center themselves, etc.  

The CSS "position" property has four possible values, whose names are [[http://learnlayout.com/position.html][impossible to remember and anyway don't make sense]].  The four most important are:

#+BEGIN_SRC css
.static {
  position: static;
}
.relative1 {
  position: relative;
}
.relative2 {
  position: relative;
  top: -20px;
  left: 20px;
  background-color: white;
  width: 500px;
}
.fixed {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 200px;
  background-color: white;
}
.absolute {
  position: absolute;
  top: 120px;
  right: 0;
  width: 300px;
  height: 200px;
}
#+END_SRC

- *Static* positioning is the default.  A statically-positioned element is said to be "unpositioned".
- *Relatively* positioned elements are displaced /relative/ to the position they "ought" to be occupying (according to the defaults).  But meanwhile, the space it "ought" to be occupying is still considered "taken" by the browser, which won't put anything else in that space unless you force it to do so.
- *fixed* elements have their position /fixed/ to a spot on the screen (which is called "the viewport" in CSS talk).  This is great when you want a fixed header or footer.
- *absolutely*-positioned elements are like fixed elements, only they're positioned relative to the /closest positioned ancestor/, usually an element with a position property value of "relative".

Understanding this well involves fiddling a lot with code; rather than make a bunch of fiddly exercies myself, I'll direct you [[http://www.codecademy.com/courses/web-beginner-en-6merh/3/1?curriculum_id=50579fb998b470000202dc8b][the codeacademy positioning exercies]], which have a great help system that makes things a little easier.

** Positioning 2: Float
So, that's one way to position elements.  Another is to use the *float* property, which imagines the page flowing like water.  The element will "float" left or right, and everything else will /flow around it/.  To stop the flowing -- that is, to require the next element to appear *below* a floated element -- that next element will need to apply the *clear* property, which stops the float.

Let's play around with this briefly [[http://jsbin.com/dakedo/1/edit?html,css,output][in JSBin]].  

** Changes Comin' Round Real Soon
All of what you just learned is in the process of changing dramatically.  Two new new CSS modules, *[[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][flexbox]]* and  makes a lot of this stuff much easier, but takes some practice to understand.

It turns out that the theme framework we use may be converting to flexbox very soon. So, [[http://jsbin.com/yukiwe/3/edit?html,css][here]] is a very quick introduction to flexbox.  You may want to look at [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][this cheatsheet]], this [[https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties][slightly more verbose one]], or [[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes][this very detailed specification]]. Meanwhile, there are lots of other new CSS features coming along, which will be supported by more and more browsers as we move forwards. We will keep an eye out for those as we continue; meanwhile, if you want to, you can check out [[http://jsbin.com/bawoqo/3/edit?html,css,output][transitions]] and [[https://css-tricks.com/almanac/properties/a/animation/][learn]] a little bit about [[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations][animations]].
* COMMENT ACTION Lab 04: Art of the Interview
:PROPERTIES:
:EXPORT_FILE_NAME: lab-04-art-of-the-interview
:END:
* Lab 05: Javascript Basics 
:PROPERTIES:
:ID:       o2b:62f1b3b6-a51b-4581-bdb4-118280788bf1
:PARENT:   10
:POST_DATE: [2016-10-11 Tue 10:12]
:POSTID:   145
:EXPORT_FILE_NAME: lab-javascript-basics
:END:

Another week, another language! This is in some ways a ridiculous way to learn about programming, and you may not remember all you learn. The most important thing is to get some sense of the types of operations that take place when programming languages interact with web pages, so you can change the code you are given to get it to do exactly what you want.  But in order to do this it wil lbe very helpful to know just a little bit about programming in general.

** What is Javascript and why do we learn it?
You'll remember that I made a a very general division early in the semester:
| Structure | Style | Dynamic Content & Effects |
|-----------+-------+---------------------------|
| HTML      | CSS   | Javascript                |

In contemporary web pages, a *lot* of the work that runs the page is done by javascript. This is easy to see, e.g., in the "Network" or "profiler" tabs of the developer tools in Chrome or Firefox.  In general, if you want to make changes to a web page after it's written, javascript is the easiest way to do it (except for CSS animations, I guess).  

Javascript also has uses outside the browser -- the Atom editor is written in Javascript, for instance.

** Running Javascript

Because we use javascript mostly to manipulate web pages, it can be a little hard to run javascript programs.  Here are a couple of ways to try javascript form inside your browser:
*** Run in Atom Editor
This might be the easiest (though eventually you will need to run in a browser, e.g., if you want to practice manipulating DOM elements).  Install the [[https://atom.io/packages/script-runner][script-runner]] package, or one off the alternatives like [[https://atom.io/packages/script][run in atom]] or [[https://atom.io/packages/script][script]], and follow directions to run code directly in the editor.
*** Console
Both Chrome and Firefox have built-in "Javascript Consoles" accessible from the developer tools: ~Tools \rarr Web Developer \rarr Console~ or ~Menu \rarr More Tools \rarr Developer \rarr Console~
*** Scratchpad
The FF console is a little awkward to use for multi-line programming, so they have also provided a "Scratchpad" tool (~Shift-F4~), which I find helpful.
*** Accessing the console
When you run code in the browser, the easiest way to print something is with the ~console.log~ function. This prints text /to the console/ so you will have to open the console to see if your code is working.  
** some code to paste into your console or scratchpad
We can start by just fooling around with a little test code. 

#+BEGIN_SRC javascript
  /*
   Here are some basic javascript constructs you will encounter in your homework
   ,*/

  // two ways to "print"
  console.log("hello");
  // alert("hello");


  // here is a very basic "for loop":
  for (i=0; i<10; i++ ) {
    console.log("this is number: " + (i+1));
  }

  // a simple array -- essentially a list
  var veggies = ["carrot", "potato", "pea"];

  // a "for-of loop" -- iterates over array items
  for (i of veggies) {
    console.log(i)
  };

  // a for-in loop -- iterates over array length (0,1,2,3, etc)
  for (i in veggies) {
       console.log(veggies[i])
       };


  // the same stuff, now applied to a web page
  // this stuff won't work from inside your editor!
  // try with other element types: h2, p, etc.  
  var headings = document.getElementsByTagName("h1");
  console.log(headings);
  for (i=0; i<headings.length; i++) {
      headings[i].innerHTML = i + 1 +". " + headings[i].innerHTML;
      console.log(headings[i].innerHTML);
  };

  // this will overwrite the whole document!
  //document.write("hello");

  // objects

  // defines a new object type: Animal
  function Animal (name,numLegs) {
      this.name=name;
      this.numLegs=numLegs;
  }


  // creates a variable of type Animal
  var penguin = new Animal("Penguin", 2);

  // shows the internal structure of the object
  console.log (penguin);

  // you can iterate over the penguin's attributes
  for (i in penguin) {
      console.log(i + ": " + penguin[i]);
  }

  // Add a new "method" to the object
  Animal.prototype.sayName = function() {
      console.log("Hi my name is " + this.name);
  };

#+END_SRC
** COMMENT Pseudo-code
Sometimes when you're trying to figure out what to do, it cam be useful to write /pseudo-code:/ a skeletal outline of what you're trying to do that you then can translate into a real computer language:

#+BEGIN_SRC text
Headlines = all the headline elements
counter = 1
Loop over Headlines:
    add "counter" and ". " to beginning of headline
done
#+END_SRC
Obviously this code won't work, but it will help you figure out what you do need to know in order to accomplish your goal.

Things I need to cover: 
- control structures
- variables
- functions
- objects

** Variables

You have all taken algebra, so you have all seen /variables/. Let's think of it this way: a variable is a box, into whic you can place a /value/.
#+BEGIN_SRC js :results output code  replace :exports both
var myString = "Hello, everyone";
console.log(myString);
#+END_SRC

#+BEGIN_SRC javascript
  var myString = "some value in here";
  var myNumber = 47;
  var myArray = ["first is a string", 2, "third is also a string"];
  var myObject = {first:"first is a string", second: 2, third:"third is also a string"};
#+END_SRC
In almost all programming languages, there are many variable "types"; javascript variables are "dynamically typed", which means that the type is determined only when the variable is actually being used. This is very handy, but can sometimes lead to confusion, e.g., compare:

#+BEGIN_SRC javascript
  console.log("Hello, I am a string " + 1 + 2);
  console.log(1 + 2 + " but I am a number");
#+END_SRC

** Loops
#+BEGIN_SRC js :results output code  replace :exports both
 // here is a very basic "for loop":
  for (i=0; i<10; i++ ) {
    console.log("this is number: " + (i+1));
  }

  // a simple array -- essentially a list
  var veggies = ["carrot", "potato", "pea"];

  // a "for-of loop" -- iterates over array items
  for (i of veggies) {
    console.log(i)
  };

  // a for-in loop -- iterates over array length (0,1,2,3, etc)
  for (i in veggies) {
       console.log(veggies[i])
       };


#+END_SRC


#+BEGIN_SRC javascript
  for(var i = 0; i < 10; i++) {
      console.log("This is iteration number: " + (i + 1) );
  }
#+END_SRC
**** Flow Control
also if statements -- what will this print?
#+BEGIN_SRC javascript
  var dimensions = 3;

  if (dimensions > 3) {
      warp.speed("Make it so");
  } else {
      console.log (" I dannae think she can take any more, Captain!");
  }

#+END_SRC

You'll learn a few more in the homework (notably ~switch/case~ and ~try/catch~); but these two do the two basic operations you need to understand: /repeat/ and /test/. 


** Accessing the DOM
Javascript uses something called the Document Object Model to understand the web page. As far as Javascript is concerned, the DOM is a big complex object, whose parts can be identified, manipulated, and used as input for complex functions.  Here's a relatively simple operation you can try in the Firefox scratchpad with a :
#+BEGIN_SRC javascript
var headings = document.getElementsByTagName("h1");
console.log(headings);
for (i=0; i<headings.length; i++) {console.log(headings[i].innerHTML);};
// alert(headings);
#+END_SRC

** Objects
Objects deserve special mention, because they can be hideously complex.  

#+BEGIN_SRC javascript

  // defines a new object type: Animal
  function Animal (name,numLegs) {
      this.name=name;
      this.numLegs=numLegs;
  }


  // creates a variable of type Animal
  var penguin = new Animal("Penguin", 2);

  // shows the internal structure of the object
  console.log (penguin);

  // you can iterate over the penguin's attributes
  for (i in penguin) {
      console.log(i + ": " + penguin[i]);
  }

  // Add a new "method" to the object
  Animal.prototype.sayName = function() {
      console.log("Hi my name is " + this.name);
  };
#+END_SRC


** Functions
Functions in JS are defined in two ways: 

As a declaration:
#+BEGIN_SRC javascript
function square(number) {
  return number * number;
}
#+END_SRC
As an expression:
#+BEGIN_SRC javascript
  var square = function(number) { 
      return number * number 
  };
#+END_SRC

Functions in Javascript are "first-order objects" and can be used in mind-bending ways.  You don't need to worry about those for a little while yet.  
* COMMENT Lab 06: Wordpress & Wordpress Themes
:PROPERTIES:
:ID:       o2b:00873ce5-90ca-4c97-aa2b-d58be4609329
:PARENT:   10
:POST_DATE: [2016-11-29 Tue 09:53]
:POSTID:   239
:EXPORT_FILE_NAME: lab-wordpress-&-wordpress-themes
:END:
[[http://wordpress.org][Wordpress]] is a sophisticated [[http://en.wikipedia.org/wiki/Content_management_system]["Content Management System]]" that uses a database to store your content, and a set of short programs written in the [[http://php.net][PHP]] programming language to present that content in a consistent manner.  THere are many parts to this PHP "engine", including especially [[http://codex.wordpress.org/Using_Themes][themes]] and [[http://codex.wordpress.org/Plugins][plugins]].  In this exercise you will start to set up your own wordpress site, and begin to get familiar    Wordpress themes are potentially very powerful, but they can also be quite simple.  In this exercise we will start modify a very, very simple theme, changing the colour scheme and layout of your website's presentation.  

** Getting Started
In your personal wordpress installation -- available at http://yourname.hackinghistory.ca -- you will have access to a completely breakable sandbox environment. Go wild!
*k* Content Management Systems
- a [[http://en.wikipedia.org/wiki/Web_content_management_system][CMS]] is a system that allows web pages, and structured sets of pages, to be constructed from existing documents and text/HTML entered by users who may have little knowledge of HTML or the other underlying technologies that display those pages. There are hundreds of CMS's in existence today, some Free/Open Source, others distributed under non-free licenses.  
** What is Wordpress?
Take a look at this chart:
[[file:///home/matt/HackingHistory/Handouts/data_and_metadata_on_the_web.png]]

- WP /assembles/ a page from many component parts. This is accomplished by a now-complex set of /scripts/ that offers instructions on what data to pull from the database and how to represent it on the page.
- the underlying scripts are primarily written in the computer language [[http://php.net/manual/en/tutorial.php][PHP]], one of most popular languages for web "[[http://en.wikipedia.org/wiki/Server-side][server-side]]" programming. When a URL belonging to the site is requested, the Wordpress scripts activate, [[http://en.wikipedia.org/wiki/Parsing][parse]] the URL, and translate it into a set of instructions which are used to generate the HTML for the specific page we want.
** Posts and Pages
Wordpress is highly extensible through the [[http://codex.wordpress.org/Plugins][Plugin]] system. However, the default installation of Wordpress comes with two main types of content: 
- [[http://codex.wordpress.org/Posts][Posts]] show the origins of Wordpress as a blogging engine -- they're a kind of content that's expected to be updated frequently, and to be of largely trnasitory interest; and
- [[http://codex.wordpress.org/Pages][Pages]], which are relatively permanent pieces of content that help populate, for instance, your menu system.  
You'll often see other kinds of content -- events, for instance, or links , biblographies, Facebook-style status updates; these are additional functionality that may or may not be available to you.
** Databases
- We won't go into this here, but the information you see in a post is distributed across many entries in a [[http://computer.howstuffworks.com/question599.htm][relational database]]. Knowing this can sometimes help you to track down errors that sneak into your website through admin carelessness.  
** Themes, Styles and Templates
- The look and feel of your website is also controlled by PHP files, often with help from files written in other languages, especially [[http://computer.howstuffworks.com/question599.htm][CSS]] and [[http://www.w3schools.com/js/][Javascript]]. Sometimes the look of your website will be affected by [[http://codex.wordpress.org/Plugins][Plugins]], but most of what you see is related instead to your [[http://codex.wordpress.org/Themes][Theme]].
- A *Theme* is a collection of files -- at minimum two, but often many more -- from which wordpress takes instructions when presenting the page.  There are thousands of themes in the [[http://wordpress.org/extend/themes/][official directory]] and thousands more for sale or download outside it.
- The easiest way to install a new theme is to *download it* using the Wordpress Admin interface.  Sometimes this won't work -- if you're writing your own theme, for instance!  I'm hoping we will have a chance to write our own [[http://codex.wordpress.org/Child_Themes][Child Themes]] later on, so if you want to do that, drop me a line and I'll hook you up with [[http://en.wikipedia.org/wiki/File_Transfer_Protocol][FTP]] access to the server.  

*** Themes are collections of files
:PROPERTIES:
:END:
- they live in your wordpress install:
[[file:~/HackingHistory/Images/wp-file-structure.jpg]]
*** Themes are written primarily in PHP
:PROPERTIES:
:END:
PHP is a programming language developed specifically for writing web pages.  Most PHP files consist of HTML and PHP intermixed with each other. This can be a little confusing, but you will get used to it. We will puzzle through the PHP syntax together, but you might want to try the [[http://www.codecademy.com/en/tracks/php][Codeacademy PHP track]] as an introduction to the language basics.  Knowing just a little will make your work a lot easier next semester.  

#+BEGIN_SRC php
<?php echo('Hello World'); ?>
#+END_SRC

*** Themes tell wordpress how to display your content
:PROPERTIES:
:END:
[[http://pengbos.com/wp-content/uploads/2010/11/wp.jpg]]

*** Understanding the Loop
:PROPERTIES:
:END:
One of the first things you will encounter in a Wordpress theme is "the loop", which usually looks like this:
#+BEGIN_SRC 
<?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
	<!-- do stuff ... -->
<?php endwhile; else : ?>
	<p><?php _e( 'Sorry, no posts matched your criteria.' ); ?></p>
<?php endif; ?>
#+END_SRC

This is a little hard to read, because it uses PHP's hideous [[http://php.net/manual/en/control-structures.alternative-syntax.php][alternate syntax for control structures]]. Let's rewrite it in the ordinary syntax:

#+BEGIN_SRC 
<?php 
if ( have_posts() ) {
	while ( have_posts() ) {
		the_post(); 
		//
		// Post Content here: do stuff
		//
	} // end while
} else {  ?> 
    <p>
    <?php _e( 'Sorry, no posts matched your criteria.' ); } // end if/else ?>

#+END_SRC

What the heck does this mean? Well, you'll see there is a ~while~ loop wrapped in an ~if~ test.  Then there are two functions -- can you see them?  The [[https://codex.wordpress.org/The_Loop][wordpress docs]] explain it this way:

#+BEGIN_QUOTE
In English (PHP types and people familiar with code speak can skip to below), the above would be read: If we are going to be displaying posts, then get them, one at a time. For each post in the list, display it according to <!-- do stuff ... -->. When you hit the last post, stop. The do stuff line(s), are template dependent.

A little aside on Do stuff: in this example it is simply a placeholder for a bunch of code that determines how to format and display each post on a page. 
#+END_QUOTE

Digging a little deeper, we find:
#+BEGIN_QUOTE
An explanation for the coders out there: The have_posts() and the_post() are convenience wrappers around the global $wp_query object, which is where all of the action is. The $wp_query is called in the blog header and fed query arguments coming in through GET and PATH_INFO. The $wp_query takes the arguments and builds and executes a DB query that results in an array of posts. This array is stored in the object and also returned back to the blog header where it is stuffed into the global $posts array (for backward compatibility with old post loops). 
#+END_QUOTE

So, basically: 
- ~the_post()~ is a function that grabs one member of an array of posts -- itself a very complex object -- and dumps it into a new object called ~$post~.
- Within the loop, you will then call on other function to access properties of the post.  You can also access those properties directly, but it is often hard to do that.  So, for instance, you might write:
#+BEGIN_SRC 
  <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
  <article id="post-<?php the_ID(); ?>">
      <header>
          <h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
      </header>
      <div class="entry-content">
          <figure><a href="<?php the_permalink(); ?>"><?php if ( has_post_thumbnail() ) {the_post_thumbnail('large'); } ?></a></figure> <?php the_excerpt(); ?>
      </div>
  </article>

  <?php endwhile; else : ?>
          <p><?php _e( 'Sorry, no posts matched your criteria.' ); ?></p>
  <?php endif; ?>
#+END_SRC

Let's go over each of these functions in class.  

*** Files in your theme
:PROPERTIES:
:END:
- *style.css:*  your stylesheet; you need this
- *functions.php:* you're going to need this too
- *index.php:* this is the default template for your theme; you can't live without it
- *header.php:* controls your header.
- *footer.php:* controls your footer area
- *sidebar.php:* generates your sidebar

*** Template hierarchy
:PROPERTIES:
:END:
remember this:

[[http://pengbos.com/wp-content/uploads/2010/11/wp.jpg]]

Here is a more detailed view:

[[file:~/HackingHistory/Images/Template_Hierarchy.png]]

When accessing a piece of data from the database, Wordpress will check in sequence to see if appropriate templates are available and use the first matching template it finds.  

*** Plugins and themes
:PROPERTIES:
:END:
- Themes control appearance
- plugins add functionality
- but sometimes the difference isn't so clear
- We will try to keep things pretty well-separated, but sometimes it's just much easier to do all your programming in a theme.  

*** Editing Your Theme
:PROPERTIES:
:END:
- I recommend editing directly from Atom. We'll discuss in class how to do it. However, if that doesn't work, you can try one of the options below:
  - install one of several Wordpress plugins that make theme editing a litlte easier:
    - [[https://en-ca.wordpress.org/plugins/wp-editor/]]WP-editor]] appears to be the best maintained
    - [[http://wordpress.org/plugins/wpide/][wp-ide]] is one I've used in the past.
    - If these feel a little awkward try [[http://wordpress.org/plugins/better-file-editor/][better file editor]] instead -- it may be sufficient for our needs (I haven't experimented with it yet).
- try changing the 'powered-by' text in the footer to our starter theme.  Did you make it work? Did you (alternatively) break the Internet?
- Check out functions.php, and then sidebar.php.  Can you understand what's going on?  It's not easy to understand!
- try editing the css enough so that you can get something un-hideous.
**** Headers
:PROPERTIES:
:END:
Right now there is no custom header support in our theme!  To use a header image,
add this code to functions.php:

#+BEGIN_SRC php
<?php add_theme_support('custom-header); ?>
#+END_SRC


And put this somewhere in header.php: 

#+BEGIN_SRC php
<img src="<?php echo( get_header_image() ); ?>" alt="<?php echo( get_bloginfo( 'title' ) ); ?>" />

#+END_SRC 
*** Learn much, much more
:PROPERTIES:
:END:
There is a huge amount of information online at the [[http://codex.wordpress.org/Stepping_into_Templates][Wordpress Codex]].  That last link is a good starting point, and so is the [[http://codex.wordpress.org/Theme_Development][Theme Development Page]].  There is lots and lots and lots to learn here...  




** COMMENT Assignment: build a Wordpress site
*** Commemorate an Imaginary Event
:PROPERTIES:
:END:
You are tasked with building a website that explores... something that hasn't happened. Invent an event or historical phenomenon (feel free to write from the future if you like), and create a web page that's suited to its exploration.
*** Your Site already exists
:PROPERTIES:
:END:
Navigate to http://yourfirstname.hackinghistory.ca.  Ta-da! there's a wordpress site ready and waiting for you.  Configure it and off we go.
*** Think about Site Structure
:PROPERTIES:
:END:
You will probably want to create a small hierarchy of pages that describe your event.  What are the important facts about this event? And how should they be organized? Where will you introduce visitors to the event and to the purpose of the site?  How will users participate in the life of the website?  In one week, you won't be able to build Wikipedia or facebook; you might need to create placeholder pages that just explain what they /ought/ to do.
*** Style your Site
:PROPERTIES:
:END:
How do you want this site to look? How many columns? What Images, and where?  Explore the installed themes or installl your own.  We'll move on to writing our own themes soon.  

Have fun!!



#+//home/matt/HackingHistory/Handouts/data_and_metadata_on_the_web.png http://2012.hackinghistory.ca/wp-content/uploads/2012/09/wpid-data_and_metadata_on_the_web.pn
* COMMENT Lab 07: Wordpress Templates
:PROPERTIES:
:ID:       o2b:e80d81e3-8725-4427-a8bf-cb3d39419c25
:POST_DATE: [2017-01-17 Tue 11:04]
:POSTID:   257
:END:
We've talked about Wordpress themes [[/lab-05-theming-with-wordpress/][before]]. Today we go a little more in depth into wordpress templates, which are the heart of any theme.  

[[http://codex.wordpress.org/Stepping_Into_Templates][Stepping Into Templates]] is an excellent introduction to Wordpress templates.  I advise you read it, and we will do some of the exercises in class.  More advanced documentation can be found [[http://codex.wordpress.org/Theme_Development#Template_Files][in the Theme Development page]], and also [[http://codex.wordpress.org/Blog_Design_and_Layout][elsewhere on the Wordpress codex]].  I strongly advise you to use this powerful resource.  

One way to think about template files is as [[http://en.wikipedia.org/wiki/Blackboxing][black boxes]], which need to be "opened up" when you have a problem, but otherwise stay safely closed behind the scenes.  When you open the template up, each piece of it is also a black box:  these pieces can either be ignored, or opened up themselves.  Your main job will be to figure to /which boxes you need to open/, and /how to find out more about each piece/.  
** Templates
Finally, just a note on how pages are generated in wordpress out of templates.  Quickly read [[http://codex.wordpress.org/Stepping_Into_Templates][this page]] on the wordpress website.  Can you tell where the template divisions are in a page from our site?  Try inspecting the sourcecode or (nuch better!) uing the [[https://developer.mozilla.org/en-US/docs/Tools][Developer Tools]]in your browser.

** ACTION [#B] Templates are PHP
Templates are PHP documents.  We have talked a /little tiny bit/ about PHP, but not much.  It is a language like other languages, but designed for the web.  As a result, php files have a strange structure:  they mix pieces of PHP code with pieces of plain HTML markup.  So, you will see things like this:

#+BEGIN_VERSE
    <figure><a href="<?php the_permalink(); ?>"><?php if ( has_post_thumbnail() ) {the_post_thumbnail('medium'); } ?></a></figure>
#+END_VERSE

Notice that this is a piece of plain-old HTML, except for a little piece of php embedded in it:
#+BEGIN_VERSE
<?php if ( has_post_thumbnail() ) {the_post_thumbnail('medium'); } ?>
#+END_VERSE
All PHP code is contained in tags that start with ~<?php~ and end with ~?>~.  This way, you can write your markup in HTML, and embed /dynamic content/ using PHP.

*** Exercise
:PROPERTIES:
:END:
Create a new template file in the main directory of your theme (grunterie).  Call it page-YOURNAME.php

** ACTION [#B] COMMENT Identifying your Templates                             :tag1:
Every custom template you write should have a name, so that it can be used in the Wordpress editor interface (and for other reasons as well.) The Template Name is stored as a special comment at the very beginning of the template file.  It will look like this: 

#+BEGIN_VERSE
<?php
/*
Template Name: super Cool Design For Your Awesome Content!
*/
?>
#+END_VERSE

*** Exercise
:PROPERTIES:
:END:
Add this text to your template

** Adding the Basic Template Parts
Every page has three main areas:  The header, the footer, and the content.
- *the header* contains /both/ the ~<head>~ element -- with all the included CSS and javascript, metadata, etc. -- and the opening ~<body>~ tag, as well as the /header/ that you see at the top of every page.
- *the footer* closes up the ~</body>~ and ~</html>~ tags, but before doing so, adds everything you want to put at the bottom of every page -- the copyright notice, for instance, and in some cases navigation elelemtns or widgets.
- *the content* contains everything else -- all the complex layout that comes in between.  For instance, it contains both the *sidebar* and the *Wordpress Loop*.  

To see how it works, Let's make an ultra-simple template.

*** Exercise
:PROPERTIES:
:END:

Add some structure to your template by adding these lines:

#+BEGIN_VERSE
<?php /* first get the header */ ?>
<?php  get_header(); ?>

<?php /* then get the sidebar */ ?>
<?php get_sidebar(); ?>

<?php /* finally get the footer */ ?>		
<?php get_footer(); ?>

#+END_VERSE

Now, create a new page on your website (+ button in the interface) and assign in your template file. Make sure you type a title and some content.  What does it look like when you "view page"?

** Adding the Loop
You will only get your content to display by adding the so-called "loop". Most of this is pretty dark magic (and some developers really hate Wordpress because of this design!).  It is, in fact, a "loop" in php -- a ~while~ loop that repeats for as many posts as are intended to be displayed on the page (for us, it is almost always only one page, except when we build searches).

*** Exercise
:PROPERTIES:
:END:
Add this code to your template file:
#+BEGIN_VERSE
<!-- Row for main content area -->
<div class="small-12 large-12 columns" id="content" role="main">
    <figure><a href="<?php the_permalink(); ?>"><?php if ( has_post_thumbnail() ) {the_post_thumbnail('medium'); } ?></a></figure>
</div>

	<?php /* Start 'the loop', the mysterious wordpress magic */ ?>
	<?php while (have_posts()) : the_post(); ?>
		<article <?php post_class() ?> id="post-<?php the_ID(); ?>">
			<header>
				<h1 class="entry-title"><?php the_title(); ?></h1>
				<?php reverie_entry_meta(); ?>
			</header>

			<div class="entry-content">
				<?php the_content(); ?>
			</div>
                        <?php $featured_img = wp_get_attachment_image_src ( get_post_thumbnail_id ( $post->ID ), 'single-post-thumbnail' );  ?>
                        <?php if ($featured_img) { ?>
                            <div class="lightbox-img featured-img-wrap">
                              <a href="<?php echo $featured_img[0]; ?>" rel="lightbox"><img src="<?php echo $featured_img[2]; ?>" /></a></div>
                        <?php } ?>
			<footer>
				<?php wp_link_pages(array('before' => '<nav id="page-nav"><p>' . __('Pages:', 'reverie'), 'after' => '</p></nav>' )); ?>
				<p><?php the_tags(); ?></p>
			</footer>
			<?php comments_template(); ?>
		</article>
	<?php endwhile; // End the loop ?>


#+END_VERSE

This is the main "loop" that grunterie uses for pages.  Where should it go in your file? And what happens when you use it? 

** Template Tags
So, templates are combination of /static/ HTML layout, and /dynamic/ PHP-generated content.  The PHP functions we use in templates are called ~template tags~.  There are hundreds of them, and most are [[http://codex.wordpress.org/Template_Tags][listed here]].  We have already seen three of them in some detail:  ~get_header()~, ~get_footer()~, and ~get_sidebar()~.  What do they do, and how do you think they work?  

Three is one more important tag in the same category: ~get_template_part('partA', 'partB')~.  The syntax is described in detail in the Codex -- can you find it? Can you read it?  

Every template tag takes ~parameters~ -- sometimes optional, sometimes required.  THere is a lot more info [[http://codex.wordpress.org/Stepping_Into_Template_Tags][here]].  It's worth reading.  

*** Exercise
:PROPERTIES:
:END:
Find the template tags inside the Loop.  change some of them to display other information!

** Designing Templates
You should be now have ideas for your layouts.  We will spend the rest of class implementing them; I will continue to update this page with more details as it becomes clear what you need!



-----
* COMMENT Lab 07: Theming with Wordpress
:PROPERTIES:
:ID:       o2b:771ddc0e-fbdc-45cf-be28-54113248bc2e
:POST_DATE: [2015-09-14 Mon 16:08]
:POSTID:   105
:PARENT:   10
:EXPORT_FILE_NAME: lab-07-theming-with-wordpress
:END:
** Themes are collections of files
:PROPERTIES:
:END:
- they live in your wordpress install:
[[file:~/HackingHistory/Images/wp-file-structure.jpg]]
** Themes are written primarily in PHP
:PROPERTIES:
:END:
PHP is a programming language developed specifically for writing web pages.  Most PHP files consist of HTML and PHP intermixed with each other. This can be a little confusing, but you will get used to it. We will puzzle through the PHP syntax together, but you might want to try the [[http://www.codecademy.com/en/tracks/php][Codeacademy PHP track]] as an introduction to the language basics.  Knowing just a little will make your work a lot easier next semester.  

#+BEGIN_SRC php
<?php echo('Hello World'); ?>
#+END_SRC

** Themes tell wordpress how to display your content
:PROPERTIES:
:END:
[[http://pengbos.com/wp-content/uploads/2010/11/wp.jpg]]

** Understanding the Loop
:PROPERTIES:
:END:
One of the first things you will encounter in a Wordpress theme is "the loop", which usually looks like this:
#+BEGIN_SRC php
<?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
	<!-- do stuff ... -->
<?php endwhile; else : ?>
	<p><?php _e( 'Sorry, no posts matched your criteria.' ); ?></p>
<?php endif; ?>
#+END_SRC

This is a little hard to read, because it uses PHP's hideous [[http://php.net/manual/en/control-structures.alternative-syntax.php][alternate syntax for control structures]]. Let's rewrite it in the ordinary syntax:

#+BEGIN_SRC php
<?php 
if ( have_posts() ) {
	while ( have_posts() ) {
		the_post(); 
		//
		// Post Content here: do stuff
		//
	} // end while
} else {  ?> 
    <p>
    <?php _e( 'Sorry, no posts matched your criteria.' ); } // end if/else ?>

#+END_SRC

What the heck does this mean? Well, you'll see there is a ~while~ loop wrapped in an ~if~ test.  Then there are two functions -- can you see them?  The [[https://codex.wordpress.org/The_Loop][wordpress docs]] explain it this way:

#+BEGIN_QUOTE
In English (PHP types and people familiar with code speak can skip to below), the above would be read: If we are going to be displaying posts, then get them, one at a time. For each post in the list, display it according to <!-- do stuff ... -->. When you hit the last post, stop. The do stuff line(s), are template dependent.

A little aside on Do stuff: in this example it is simply a placeholder for a bunch of code that determines how to format and display each post on a page. 
#+END_QUOTE

Digging a little deeper, we find:
#+BEGIN_QUOTE
An explanation for the coders out there: The have_posts() and the_post() are convenience wrappers around the global $wp_query object, which is where all of the action is. The $wp_query is called in the blog header and fed query arguments coming in through GET and PATH_INFO. The $wp_query takes the arguments and builds and executes a DB query that results in an array of posts. This array is stored in the object and also returned back to the blog header where it is stuffed into the global $posts array (for backward compatibility with old post loops). 
#+END_QUOTE

So, basically: 
- ~the_post()~ is a function that grabs one member of an array of posts -- itself a very complex object -- and dumps it into a new object called ~$post~.
- Within the loop, you will then call on other function to access properties of the post.  You can also access those properties directly, but it is often hard to do that.  So, for instance, you might write:
#+BEGIN_SRC php
  <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
  <article id="post-<?php the_ID(); ?>">
      <header>
          <h2><a href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h2>
      </header>
      <div class="entry-content">
          <figure><a href="<?php the_permalink(); ?>"><?php if ( has_post_thumbnail() ) {the_post_thumbnail('large'); } ?></a></figure> <?php the_excerpt(); ?>
      </div>
  </article>

  <?php endwhile; else : ?>
          <p><?php _e( 'Sorry, no posts matched your criteria.' ); ?></p>
  <?php endif; ?>
#+END_SRC

Let's go over each of these functions in class.  

** Files in your theme
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- *style.css:*  your stylesheet; you need this
- *functions.php:* you're going to need this too
- *index.php:* this is the default template for your theme; you can't live without it
- *header.php:* controls your header.
- *footer.php:* controls your footer area
- *sidebar.php:* generates your sidebar

** Template hierarchy
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
remember this:

[[http://pengbos.com/wp-content/uploads/2010/11/wp.jpg]]

Here is a more detailed view:

[[file:~/HackingHistory/Images/Template_Hierarchy.png]]

When accessing a piece of data from the database, Wordpress will check in sequence to see if appropriate templates are available and use the first matching template it finds.  

** Plugins and themes
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Themes control appearance
- plugins add functionality
- but sometimes the difference isn't so clear
- We will try to keep things pretty well-separated, but sometimes it's just much easier to do all your programming in a theme.  

** Editing Your Theme
:PROPERTIES:
:END:
- I recommend editing directly from Atom. We'll discuss in class how to do it. However, if that doesn't work, you can try one of the options below:
  - install the [[http://wordpress.org/plugins/wpide/][wp-ide]] plugin to enable you to do syntax-highlighted code editing in your browser.  If the interface feels a little awkward try [[http://wordpress.org/plugins/better-file-editor/][better file editor]] instead -- it may be sufficient for our needs (I haven't experimented with it yet).
- try changing the 'powered-by' text in the footer to our starter theme.  Did you make it work? Did you (alternatively) break the Internet?
- Check out functions.php, and then sidebar.php.  Can you understand what's going on?  It's not easy to understand!
- try editing the css enough so that you can get something un-hideous.
*** Headers
:PROPERTIES:
:END:
Right now there is no custom header support in our theme!  To use a header image,
add this code to functions.php:

#+BEGIN_SRC php
<?php add_theme_support('custom-header); ?>
#+END_SRC


And put this somewhere in header.php: 

#+BEGIN_SRC php
<img src="<?php echo( get_header_image() ); ?>" alt="<?php echo( get_bloginfo( 'title' ) ); ?>" />

#+END_SRC 
** Learn much, much more
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
There is a huge amount of information online at the [[http://codex.wordpress.org/Stepping_into_Templates][Wordpress Codex]].  That last link is a good starting point, and so is the [[http://codex.wordpress.org/Theme_Development][Theme Development Page]].  There is lots and lots and lots to learn here...  

# HackingHistory/Images/wp-file-structure.jpg http://2014.hackinghistory.ca/wp-content/uploads/2014/10/wpid-wp-file-structure.jpg

# HackingHistory/Images/Template_Hierarchy.png http://2014.hackinghistory.ca/wp-content/uploads/2014/10/wpid-Template_Hierarchy.png

* COMMENT Lab 08: Spatial History with Google Maps
:PROPERTIES:
:ID:       o2b:ef1c68be-0f41-4ad8-8798-84dbc7e73b7c
:PARENT:   10
:POST_DATE: [2016-10-25 Tue 09:28]
:POSTID:   176
:EXPORT_FILE_NAME: lab-spatial-history-with-google-maps
:END:

** Google Maps and Spatial History

Today in class we discussed /spatial history/, that is, history which focusses very strongly on the cultural history of space and place. There is nothing /intrinsically digital/ about spatial history, nor is it necessarily qunatitative in nature; but the incredible development of Geographical Information Systems (GIS) in the last 15 years has made the use of interactive digital maps an attractive target for historians.

Sophisticated works such as the [[http://web.stanford.edu/group/spatialhistory/cgi-bin/site/pub.php?id=29][Spatial History Project]] and Ben Schmidt's [[http://sappingattention.blogspot.co.uk/2012/10/data-narratives-and-structural.html][Whaling Maps Project]] take substantial technical effort to achieve their effects; in general, lengthy training in the use of specialized GIS software is required. We have our own example in the [[http://decima.chass.utoronto.ca/][DECIMA Project]] run by Prof. Terpstra in our department.

Our approach will be decidedly more lightweight. In class today, we will build a very simple "Geographical Information System" around a Google Map. Google Maps are, in fact, highly sophisticated GIS's, with powerful tools for accessing various layers of information; but in order to work with them, we will need to use a very small amount of Javascript.
** Read this part! Follow the links! 
Today's exercise also brings together some of what you've already learned in class, and brings back the .  We will be working in the /[[https://help.github.com/articles/markdown-basics/][markdown]]/ syntax ([[https://help.github.com/articles/github-flavored-markdown/][github flavour]]), and you will also be able to choose between
- working in the [[http://jsbin.com/jusena/10/edit?html,js,output][JSBin Online Editor]], which we've seen before
  using [[https://github.com/titaniumbones/maps-with-markdown][a copy you can download and work with on your own]].

The latter version also serves as an introduction to the [[https://github.com/][Github code-sharing platform]]. If you continue working with code-based academic projects, you will eventually want to learn more about git, which is an enormously powerful resource.  Our next assignment will also be made available on Github, so this is a chance to get a head start. If you want to work locally, I strongly recommend the [[https://atom.io/][Atom Code Editor]], which we've discussed  If you also install the atom-html-preview package, you will get live updates of your code in a second tab, almost like in jsbin.  See the [[https://atom.io/docs/v1.0.2/using-atom-atom-packages][documentation]] for more info.    

** What is a GIS?
GIS is just a name for any system that tries to capture, manipulate, and represent geographical data. There are many GIS tools; the history department uses [[http://www.arcgis.com/features/][ArcGIS]], which is expensive and something of an industry standard, while many independent scholars use [[http://www.qgis.org/en/site/][QGIS]], which is free, open source, and not quite as powerful as Arc.

The data in a GIS is all [[https://en.wikipedia.org/wiki/Geotagging][geotagged]], that is, assigned a set of geographical co-ordinates. This sounds simple but it is actually quite complex, since any co-ordinate system is a /simplified projection/ of real, disordered, 3-dimensional space.  Many of the frustrations of working with GIS comes from the difficulty of rendering (say) historical map images /commensurate/ with modern, satellite-derived maps.

Within a GIS, information is generally accessed as a set of *layers*.  Data of specific types is /stratified/ in layers, in much the same way that one creates image layers in photoshop. This image gives a typical example.  Note that the creation of layers is itself an intellectual decision, relying on judgments about the relationships between individual bits of data.
http://iolandarch.com/wp-content/uploads/2014/09/overlay-analysis.jpg

** Controlling Google Maps

For our exercise today, we are really only interested in two layers:  the "basemap", that is, the street or satellite map most of us use on an almost-daily basis; and the /marker layer/, in which all of the little pins on a map are stored.  We access these layers, and create those markers, with Javascript, by making /calls/ to the /Google Maps API/.

#+BEGIN_ASIDE
An *API* is an "Application Programming Interface": a communications channel that lets programs talk to each other.  By "loading" the Google Maps API, our web pages can communicate directly with Google's servers to modify the map that Google is presenting to us.  In fact, most of the interesting stuff happening on the web these days happens via these machine-to-machine communication channels.  
#+END_ASIDE 

You don't have to understand the Google Maps API very thoroughly to be able to do this assignment.  The code comes pre-written; all you have to do is hack at it till it does what you want it to.  

** Using Markdown

It was useful to learn HTML but it is a pain to generate it by hand. You do have to do some hand-coding of HTML for this exercise, because some of the work actually happens in Javascript; but the rest of it can be done in markdown, which I find much easier to write than HTML. 

#+BEGIN_SRC markdown
# one or more '#' marks indicates a headline

### this one is "level 3"

*a single asterisk is emphasis, or italics*. _underscores usually work too_

**two are strong, or bold** __in most markdown flavours underscores work with bold, too, which can be confusing__ 

An empty line separates paragraphs.

> blockquotes are made with angle brackets
> like this

#+END_SRC

You can also mix HTML in with markdown and it will generally render perfectly well. This is important for us because we have to create some =<div>= elements, which markdown can't do for us.

While you're coding, reflect on [[https://www.youtube.com/watch?v=Q8gGsuWouDE&t=0m20s][the satisfaction that good, honest work brings to the act of electronic communication]]. 

** The Exercise
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Today you will create a web page containing a Google Map.  The Google Map will contain 1-3 markers related to one of the themes we wrote on the blackboard in our last class.  It will also contain a VERY brief essay that discusses the historical significance of the events represented by those markers, all the while paying homage to the project of spatial history: foregrounding the spatial elements of the historical narrative at hand.  You're not handing in your work, so don't fret too much.  Try to enjoy yourself; but also work hard, as this is good preparation for our next assignment, which will be handed out in class on Thursday. 

** The code
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
*** Javascript
:PROPERTIES:
I have made the Javascript as simple as I can. There are more efficient and interesting ways to do this, but they are a little more complex. To make your markers -- and to re-centre your map -- you will need to modify the Javascript directly.
*** HTML
:PROPERTIES:
I /think/ the only modifications you will need to make to the HTML are within the special "textarea" block containing the markdown syntax.  The rest you can probably safely ignore, though you might learn something from looking at it.
*** CSS
:PROPERTIES:
markdown, /also/ magically loads the incredible [[http://getbootstrap.com/][bootstrap]] web development framework, which includes some sophisticated CSS.  Try changing the first ~textarea~'s ~theme=united~ to one of the other supported "swatches" -- I'm a fan of "cyborg" and "slate", myself.

* COMMENT Lab 09: Personas and Wireframes 
:PROPERTIES:
:END:
Today we are making an imaginary website.  Here's our brief, noting please that it is /imaginary/.  

** Commemorating Vimy Ridge
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

With the 100th anniversary of World War I now upon us, the City of Toronto Archives wants to commemorate the [[http://en.wikipedia.org/wiki/Battle_of_Vimy_Ridge][Battle of Vimy Ridge]], but is not sure how to do it.  They have a large collection of letters to and from the Front, as well as access to the usual sources that could provide historical context.  The archive serves the general public but also has important educational functions related to school programs.  We assume for purposes of this exercise that their web department is in some kind of disarray (recent cuts have resulted in everyone being fired, perhaps?) and they come to us with wide-open questions about how to proceed.  They ask us to propose a website that will somehow engage a broad public while also being educational.  What will it look like?  Who will visit the site, and why? Should there be integration with real-world materials?  What can you do to make this a fantastic experience for everyone?  

** Groups
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
We'll divide up into groups of 3 for this exercise.

** Personas
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Use the provided persona sheets to come up with 3 idealized user personas for potential site users.

** Sitemap/Site description
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
In 1 paragraph, explain the purpose of the site, and draw a rough map that outlines the kind of content you provide.

** Wireframes 
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Use the provided wireframe sketching paper (and your own looseleaf paper) to sketch out each type of page that the site will serve up.  

That's it!
* Lab 10: From CSS to SASS!
:PROPERTIES:
:ID:       o2b:a40eea2b-0cdf-46a1-b4cd-78674099991a
:PARENT:   10
:POST_DATE: [2016-12-06 Tue 10:06]
:POSTID:   250
:EXPORT_FILE_NAME: lab-1l-from-css-to-sass!
:END:
Now that you are alll HTML/CSS/PHP ninjas....  it's time for the next language!  The web frmework we're using -- "Foundation" -- uses a language called SASS to manage style instructions.  It takes a little getting used to be soon you will start to love it, I promise.  

**  What's wrong with plain old CSS?
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
CSS is great, but it has some problems:
- it's repetitive :: often you find yourself writing the same color codes over and over again in different selectors:
#+BEGIN_SRC css
  h1 {
      color: #ab23ab;
  }
  h2 {
      color: #ab23ab;
  }
#+END_SRC
- it's brittle :: you may spend a long time figuring out the right proportions between, say, the font sizes for h1, h2,h3, and h4, or the right dimensions for div.class1 and div.class2.  Then as you're working, you find you actually want h1 to be smaller, or div.class2 to take up more of the screen.  Then you have to go back to your CSS and modify all of the individual values you just entered.
#+BEGIN_SRC css
  h1 {
      font-size: 2.0rem;
  }
  h2 {
      font-size: 1.8rem;
  }
  h3 {
      font-size: 1.6rem;
  }

  div.class1 {
      width: 38%;
  }

  div.class2 {
      width: 58%
  }

#+END_SRC
- it's hard to read :: when CSS files get complicated, they also tend to get a little convoluted;  it can be difficult to make a logical, easy-to-follow structure that makes sense of everything.

** What's the solution?
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
More and more web developers have turned to *CSS preprocessors* as a solution to this tricky problem.  A preprocessor extends the CSS language to make it capable of more cool tricks, and when you're ready, /processes/ the code you've written to allow browsers to read it.  In effect they are new languages, which are "supersets" of the CSS language.  The two main preprocessors are SASS and LESS, and in our class we will use SASS (for no really good reason, just because).  SASS lets you:
- *stop repeating yourself* 
- *write cleaner code*
- and as a result, *write maintainable code* -- code that it's easy to understand when you come back to look at it two weeks or six months or two years later.  

How does it do this, you might ask?  Well, let's see.

*** Variables
:PROPERTIES:
:END:
By now you should be getting a sense of how fantastic variables are.  PHP templates would be useless without them -- they let wordpress insert different text and HTMl content in the various slots that you've provided in your layout.  For instance, ~$post->title~ is a variable (actually, it's an =object property=, but let's not be too formal), that retrieves... the Title!  Almost all programming languages use variables, but CSS doesn't.  However:  SASS does!  

#+BEGIN_SRC scss
    $header-color: #eeeeee;
    h1 {
      color: $header-color;
      font-size:  44px;
      }
    h2 {
        color: $header-color;
        font-size: 37px;  
    }

#+END_SRC

This will generate the following CSS:

#+BEGIN_SRC css

  h1 {
       color: #eeeeee;
       font-size:  44px;
       }
  h2 {
      color: #eeeeee;
      font-size: 37px;  
  }
#+END_SRC

check it out!  Now whenever you want two elements to be the same color, you can just type the variable name instead of inserting a complicated color code.  And you can change the color of a bunch of elements all at once, simply by changing the variable value.  



*** Functions
:PROPERTIES:
:END:
You can also manipulate values using functions.  You can write your own functions (complicated!) or use the built-in functions SASS provides.  Here's an example.  
#+BEGIN_SRC scss
  $header-color: #eeeeee;
  h1 {
    color:$header-color;
    background-color: scale-color($header-color, $lightness=30%)
    }

  h2 {
    color: scale-color($header-color, $lightness=-10%);
    }


#+END_SRC
There are many built-in color manipulation functions in SASS. Here's a partial list: 
- darken()
- lighten()
- saturate()
- desaturate()
- adjust-hue()
- invert()
- complement()
- scale-color()
 
~scale-color()~ is probably the most versatile.  Let's look at it again:

#+BEGIN_SRC scss
    background-color: scale-color($header-color, $lightness:30%)
#+END_SRC
Note the different parts:
*scale-color* /($header-color, $lightness=30%)/. This function takes one main argument -- a color -- and also a number of possible "parameters", of the form: 

#+BEGIN_SRC scss
$lightness:-XX%, hue:-XXXdeg, saturation:-XX%, red:XX, blue:xXX, green:XX
#+END_SRC

You can see in our example that I make the header text color by lightening the header background.  

*** Loops and Conditionals
:PROPERTIES:
SASS contains all the basic programming syntax you want from a simple language:  conditionals, loops, and a few other tricks.  So for instance, you can try: 

#+BEGIN_SRC scss
// the number of columns
@for $i from 1 through $total-columns {
  .fade-#{$i} {
    background-color: scale-color($body-bg, $lightness:-15%*$i);
    color: scale-color($green, $lightness:15%*($i - 1));

  }
}
#+END_SRC

This piece of code will create a bunch of CSS stanzas, like this:

#+BEGIN_SRC css
.fade-1 {
  background-color: #d9d9d9;
  color: #33cc33; }

.fade-2 {
  background-color: #b3b3b3;
  color: #70db70; }

.fade-3 {
  background-color: #8c8c8c;
  color: #adebad; }

.fade-4 {
  background-color: #666666;
  color: #ebfaeb; }
#+END_SRC

*** Mixins 
:PROPERTIES:
:END:
It gets even crazier!  You can define "mixins" that you can add to whatever classes you want.  These mixins can contain complicated functions or whatever.  Here's an example:  

#+BEGIN_SRC sass
@mixin my-border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

.box { @include my-border-radius(10px); }

.some-other-box { @include my-border-radius(10px); }
#+END_SRC

This generates the code:

#+BEGIN_SRC css
.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}
.some-other-box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}


#+END_SRC
*** Excited yet?
:PROPERTIES:
:END:

You Should be.  There is still plenty to learn, but we'll stop here for now.  check out the SASS website for more info.
** Playing with SASS
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
I have a series of JSBins set up from last year, here they are:

- [[http://jsbin.com/xiyosu/edit?html,css][Intro to SASS variables]]
- [[http://jsbin.com/vomepovate/edit?html,css,output][A little bit of programming]]
- [[http://jsbin.com/gajile/edit?html][Sneak Peek at Foundation]]


** Using Foundation on your personal site
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
For fun, I have also enabled real-time compiling of SCSS files in the "grunterie" theme on your personal websites.  Feel free to try it out!


** COMMENT Next week: Foundation
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

SASS is just the tip of the iceberg for Foundation.  Next week we will check out some of the many features of Foundation, but if you want a sneak peek you can check out [[http://foundation.zurb.com/docs/][the Foundation docs]],.  


** things to put into the playground
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- text, background colors; grid sizes; div types; font sizes; 
* COMMENT Lab 11: Work Session
* COMMENT Lab 11: SASS and The Foundation Framework
:PROPERTIES:
:ID:       o2b:88d214db-06b7-4ba2-970a-a4f3e8c18499
:POST_DATE: [2016-01-12 Tue 20:19]
:POSTID:   308
:EXPORT_FILE_NAME: lab-11-sass-and-the-foundation-framework
:END:
Now that you are HTML experts, CSS ninjas, and SASS stars,  we're moving right along...  

Of course there is still tons more to learn, and you will pick up what you need to from me, from the Internet, and from your classmates.  But we are shifting gears to discuss some of the features of the web development /framework/ we will be using this year.   [[http://foundation.zurb.com/][Zurb Foundation]] is an incredibly powerful set of features that simplifies many aspects of website development.  We'll talk about it a little bit here, and you can learn a lot more from [[http://foundation.zurb.com/docs/][the official documentation]]. 

** What is a Web Framework?
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
A "framework" is a set of tools, bundled together, that create a coherent environment for web design, with alignment and co-operation between the various elements.  *Foundation* is one of two very popular such frameworks, the other of which is [[http://bootstrap.twitter.com][Twitter Bootstrap]].  It provides:
- a carefully developed set of classes that make it easy to build stylistically coherent websites, and also to design arbitarily complex layouts
- a number of cool Javascript libraries that let you do a lot of tricks that are otherwise somewhat hard to program on your own
- a very cool way to customize all of the design element 
- and as a bonus, careful attention to responsive design

** How is Foundation organized?
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Foundation is many things, but the simplest way to think of it is as a *grid of 12 columns*, that move and flow as units when you move from one size of screen to another.  Inside the grid there are various kinds of components that you can use, all of which have been pretty carefully sized and matched in relation to each other.  These include buttons, menus, panels, and dynamic elements such as tabs, image lightboxes and sliders, cool "modal" elements that drop down from the top, etc. 

** Getting started with the grid & semantic classes
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Take a look at this image:
[[file:~/HackingHistory/Images/feature-grid-1.png]]

Foundation takes the space on your screen and 
- allots itself a certain portion of it -- by default, 980px -- as *usable* space.  On a big screen, you will see wide margins around that space.
- divides the usable space into *rows* of *12 columns*.

When you're working with Foundation, you structure the webpage with <div> elements using their special semantic classes, e.g.:
#+BEGIN_SRC html 
  <div class="row">
    <div class="large-8 small-4 columns"></div>
    <div class="large-4 small-4 columns"></div> 
  </div>
#+END_SRC

You can also put rows /inside/ these columns, like this (/note:/ the simple SASS example we used last week would /not/ have allowed this row "nesting"):

#+BEGIN_SRC html 
  <div class="row">
    <div class="large-8 small-4 columns">
      <div class="row">
        <div class="large-8 small-4 columns"></div>
        <div class="large-4 small-4 columns"></div> 
      </div> 
    </div>
    <div class="large-4 small-4 columns"></div> 
  </div>
#+END_SRC
So, rather than futzing with layout details yourself, you use the expertise of the Foundation designers and just take what they've given you. 

** SASS, yay!
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
As you might imagine, we also get to use SASS to customize our sites. Take a look at ~assets/sass~ in the JointsWP directory to see how things are organized. Pay attention esp. to _settings.  


** And Javascript, too...
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Foundation also comes with lots of useful Javascript function that ease the creation of complex effects, such as modal windows, displaying different data on large and small screens.  

** Last Thoughts
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Foundation is the engine inside the Wordpress themes you'll be using for your class projects; the more you know about them, the better off you'll be.  


# /home/matt/HackingHistory/Images/feature-grid-1.png http://2014.hackinghistory.ca/wp-content/uploads/2014/09/wpid-feature-grid-1.png


# HackingHistory/Images/feature-grid-1.png http://2014.hackinghistory.ca/wp-content/uploads/2014/10/wpid-feature-grid-1.png
* COMMENT Notes on Git and Version Control for Wordpress Theming
:PROPERTIES:
:ID:       o2b:51a50b53-4de6-4921-bf1f-f7f312abdee4
:POST_DATE: [2016-01-12 Tue 18:56]
:POSTID:   301
:EXPORT_FILE_NAME: notes-on-git-and-version-control-for-wordpress-theming
:END:
(especially on Windows!)

Many thanks to Hillary for sitting with me for an hour after class as I tried to figure this out.  

Bottom  line: installing Git on Windows is somewhat convoluted and difficult to do properly.  The first-best solution is not easy to achieve, so I'm going to describe a second-best solution first. This is what I recommend for you.  

I'll also go on to discuss how you can get Git to run perfectly on your system.

** Undistributed Version Control...
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

Git was designed to solve the problem of many people living far apart, working together on a single project. For this reason it's called a "distributed" version control system.  Usually, each developer has her own copy of the repository on a local computer.  She does her testing there, and when she's ready to let other people see her work, she commits it to the central repository where other programmers can check out and test her code. 

For this to work properly, she needs a full testing environment on her computer. For Wordpress, setting up such an environment is a little complicated. In addition to the theme repository, our hypothetical coder  would need to install Wordpress, a of course, but also a webserver that runs PHP.  There are [[https://premium.wpmudev.org/blog/testing-environment-wordpress/][two pretty good]] [[https://developer.wordpress.org/themes/getting-started/setting-up-a-development-environment/][guides that I urge you to follow]] if you want to take this route. There are certainly advantages, and if one of you tries Desktop Server and the Duplicator plugin  (see the first link) and you find it works, please let me know.  

Meanwhile, the rest of us will be doing UNdistributed version control -- working together off of the central theme repository.  It's not the best way to work, but it should be a little simpler.

** Step 1: Setting up your text editor
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
You should make sure that your text editor supports working with files over ssh.  If you use [[https://www.sublimetext.com/][Sublime Text]], as I think some f yo do, I believe this is built-in.  If you use Atom, then one of several ways to do this is to install the "remote-ftp" package and "Create SFTP config file", filling in the following values:
#+BEGIN_SRC json
{
    "protocol": "sftp",
    "host": "hackinghistory.ca",
    "port": 22,
    "user": "hhstudents",
    "pass": "ASK ME FOR THE PASSWORD - THIS WILL NOT WORK AS IS",
    "promptForPass": false,
    "remote": "/var/www/flynnhouse.hackinghistory.ca/wp-content/themes/JointsWP",
    "agent": "",
    "privatekey": "",
    "passphrase": "",
    "hosthash": "",
    "ignorehost": true,
    "connTimeout": 10000,
    "keepalive": 10000,
    "keyboardInteractive": false
}
#+END_SRC

Hopefully this will work. Don't forget to change the password field.

Whenever you want to make changes to a file in the theme, do it directly on the server using Atom: Packages -> Remote-ftp -> connect, and choose the file from the sidebar that opens up.  

Test your changes by loading the relevant pages in a web browser and making sure there are no errors. When yo're sure your code makes sense, move on to the next steps.  

** Step 2: Learn how to SSH into the server
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

We'll be making git commits manually at the command line while logged in to the server (such tech!). To do this, you will need an SSH client (SSH sort of stands for "Secure SHell", and it is the standard way to get command line access to another computer). 

If you have a mac, open up a terminal and type "ssh hhstudents@hackinghistory.ca". Enter the password. You are done.  

If you have Windows, sigh.  You will need to install Putty, which you can [[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html][get here]].  Then you will need to set up a connection to hackinghistory.ca, on port 22, with user hhstudents, and password you-know-what.  You can learn all about [[https://mediatemple.net/community/products/dv/204404604/using-ssh-in-putty-][the process here]].

** Step 3: making a git commit
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

When you log in, you will be taken directly to the theme repository, because +magic+ I set things up that way.  Commit your changes this way:

#+BEGIN_SRC sh
git commit -a -m "Put a Meaningful Message Here and Include Yor Name"
#+END_SRC

Then confirm that it's worked:
#+BEGIN_SRC sh
git log
#+END_SRC

This is just scratching the surface of what you can do at the terminal.  For more help with git, [[https://git-scm.com/book/en/v2/Getting-Started-Git-Basics][review the book]].  If you want to learn more about the Linux command line, [[https://www.google.ca/search?q=linux+shell+basics&ie=utf-8&oe=utf-8&gws_rd=cr&ei=sI6VVom4OIrJeNqGnJgK][ask Google for help]].  I like the 5-minute intro about 5 hits down.  

** Checking out a local copy
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

If you want to install a local copy of the theme repository, please note that the theme is backed up on a daily basis to a [[https://github.com/HackingHistory/JointsWP/tree/flynnhouse][github repository]], which you can checkout from the command line with:

#+BEGIN_SRC sh
git clone https://github.com/HackingHistory/JointsWP.git
#+END_SRC

** Rolling back errors
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

If you've made some stupid changes, but HAVEN'T committed them yet, fix them at the command line with:

#+BEGIN_SRC sh
git checkout -- .
#+END_SRC

If you have already committed your stupid changes, then you need to do something more radical. There are a couple of options but the best choice is almost always to /revert/ your changes.  

First figure out which commit you want to get back to:

#+BEGIN_SRC sh
git log --oneline
#+END_SRC

which will show you something like this:
#+BEGIN_SRC sh
b7119f2 Continue doing crazy things
872fa7e Try something crazy
a1e8fb5 Make some important changes to page.php
435b61d Create page.php
9773e52 Initial import
#+END_SRC

Now decide which of these commits was the last good one. Usually you will just want to go back one commit:

#+BEGIN_SRC sh
git revert b7119f2
#+END_SRC

But maybe you know that you made a whole string of mistakes, and stupidly committed them without realizing how foolish you were.  Then you might revert to an earlier commit, say ~a1e8fb5~.  

#+BEGIN_SRC sh
git revert a1e8fb5
#+END_SRC

Now when you look at your commit history, you will see something like this:

#+BEGIN_SRC sh
e30583f Revert 872fa7e b7119f2
b7119f2 Continue doing crazy things
872fa7e Try something crazy
a1e8fb5 Make some important changes to hello.py
435b61d Create hello.py
9773e52 Initial import
#+END_SRC

What's cool about this? The stupid changes you made are still there in your git history, so if it turns out you SHOULDN'T have reverted to that commit, you can get back to an earlier state.

** For the Keeners: Setting up git for real
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

To make git really really work on Windows, you have to set up the whole toolchain carefully.  I'm too tired to write this all up, but I had a lot of success following this guide:

http://guides.beanstalkapp.com/version-control/git-on-windows.html

That's enough git-fu for today. More in the coming weeks!
* COMMENT Lab 06: Introducing Github
:PROPERTIES:
:ID:       o2b:41e67f32-3800-4ede-981d-39b0caa6d498
:POST_DATE: [2015-10-27 Tue 14:22]
:PARENT:   10
:POSTID:   188
:EXPORT_FILE_NAME: lab-06-introducing-github
:END:
In this lab we come back to the [[https://git-scm.com/][Git revision control system]], which we introduced in the first class. Git is the most powerful and widely-used [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][version control]] system in the world; it is primarily used by software developers but is enormously useful for any text-based document repository and is [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][increasingly being used by humanists to share their work]]. You can find git repositories for [[https://github.com/titaniumbones?tab=repositories][most of my teaching materials]], for instance.  

I /strongly/ recommend you follow this lesson up by [[http://git-scm.com/book/en/v2][reading the Git book]], especially the first 2 or 3 chapters.  

Most people love git once they start to use it, but it can be very frustrating and difficult at the beginning.  We'll go over it once, kind of quickly, then try a real-world example (checking out the next STA).
** COMMENT Pasta-Please
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
My friend [[https://twitter.com/k88hudson?lang=en][Kate Hudson]] creted a simple github training exercise last week for some of my other students.  It was really fun, so let's check it out:
1. [[https://github.com/join][Sign Up for a Github Account]] (or sign in if you already have an account)
2. Navigate to [[https://github.com/titaniumbones/pasta-please][my fork of the pasta-please repository]]
3. Take a quick look at the [[https://github.com/titaniumbones/pasta-please/blob/master/README.md][README]].  Can you understand it? Maybe we need to add some extra instructions (like, what does ~npm install -g~ mean? And where do those [[http://www.emoji-cheat-sheet.com/][emoji]] come from?) What does the program do, and (if you can get this far) how does it work?
4. Have you found where the Recipes live?
5. Add a new recipe *from inside Github itself(!)* simply by navigating to the right spot and clicking the ~+~ button.  (see the picture below)
   - Be sure to name the file "some-recipe-name.md" so that everyone knows it's written in Markdown
   - follow markdown syntax in writing your recipe
   - When you save the file, Github will *automatically create a forked repository under your account!* Magic.
   [[./Images/github-add-file.png]]
6. File a pull request with me by navigating back to the main page of your repository (~github.com/your-user-name/pasta-please/~) and hitting the Github pull request button: [[./Images/github-pull-request.png]]

Wow, that was cool, right? And if we get through this fast enough, we can try working from the command line.  
1. Choose an appropriate home for your repo and execute ~git clone https://github.com/your-user-name/pasta-please.git~
2. Add your directory to atom as a "project directory: [[./Images/github-add-project.png]]
3. Install the "git-plus" package in Atom
4. Create a new file in the appropriate place.
5. Choose menu item ~Packages \rarr Git Plus \rarr Add~, then ~Packages \rarr Git Plus \rarr Commit~, then ~Packages \rarr Git Plus \rarr Push~

There's still tons to learn but this is a good start.  
** Quick Start
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- [[https://github.com/join][Sign Up for a Github Account]]
- [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][Install Git on your Laptop]] 
- [[https://github.com/titaniumbones/maps-with-markdown#fork-destination-box][Fork the Maps Assignment]]
- [[https://help.github.com/articles/set-up-git/][configure your git information]]
- [[https://help.github.com/articles/set-up-git/#next-steps-authenticating-with-github-from-git][Be sure you can authenticate with github]]
- Create a local copy of your new Maps repository by [[https://help.github.com/articles/fork-a-repo/#step-2-create-a-local-clone-of-your-fork][cloning it]]:
  ~git clone https://github.com/YOUR-USERNAME/maps-with-markdown~
- Alternatively, [[https://c9.io/][set up an account with cloud9]], then make sure you are logged into your github Account and [[https://docs.c9.io/v1.0/docs/connected-services][connect Cloud9 to github]], then [[https://docs.c9.io/docs/setting-up-github-workspace][follow the instructions to set up a new workspace]]
- Make some changes
- Commit your changes with ~git commit -m "Useful Message Here" -a~
- *optional* Push your changes to the web with ~git push~
- *optional* [[https://help.github.com/articles/using-pull-requests/][Submit a pull request ]]

** Resources
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
This web page is woefully incomplete! Here are some better resources: 
- [[https://guides.github.com/activities/hello-world/][Hello World Guide on Githb]]
- [[https://try.github.io/levels/1/challenges/1][Code School Git Intro]]
- [[http://gitimmersion.com/index.html][Git Immersion]]
- [[https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control][Official Git Book]]

** Install Git
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
If you're on Mac or Windows, the easiest way to start is to [[https://desktop.github.com/][install the Github Desktop client]].  This will also install the command-line tools you need for our tutorials, while giving you a very pretty GUI interface. You can [[https://css-tricks.com/first-impression-of-github-desktop/][learn more about the desktop client here]] (There's no Linux version, so I don't use this).  

Once you've installed Git, let's execute our first command-line commands. In Mac, open Terminal. In Windows, open Powershell (it comes with Github Desktop).  Then type 
#+BEGIN_SRC sh
git config --global user.name "Your Name"
#+END_SRC

and then:
#+BEGIN_SRC sh
git config --global user.email youraddress@mail.utoronto.ca
#+END_SRC

This tells git some basic information about you, which it will use later on.  

** Git "States"
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
*(feel free to skip this if you want to get to the action)*

A git repository has three important "areas", each of which represents a different "state": 
- Working Directory (Uncommitted)
- Staging Area (Staged)
- .git repository (Committed)

When you look at the repository, all you see is the *working directory*.  So, if I want to start a new project, I create an empty directory, say, "Project".  Then I run the command:
#+BEGIN_SRC sh
git init
#+END_SRC
This command creates the invisible ~.git~ subdirectory, which is the real heart of the repo:  it stores all the information about previous and current states of the repository.  

** Doing and Undoing
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Every time you commit your changes in git, git saves a snapshot of the working directory to the .git repository.  So, in principle, you can get back to any earlier working state of the repository, which is awesome.  

- commit :: the most elementary operation in git is "committing"; this saves your working directory to the repository. Here are the steps
  - make some changes
  - commit them with ~git commit -a -m Message~
- checkout :: To inspect some other state of the repository, you will need to "checkout" that state:
     ~git checkout HEAD~3~ will checkout the version you were working on 3 saves ago, for instance.   

** Branching
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Sometimes you want to be able to come back to a particular revision -- maybe you have everything working fine, and you want to be sure you can get back to the working state.  Maybe you create an "experiments branch" to work on; if it breaks, you can just switch back to the master branch with no harm done.  
#+BEGIN_SRC sh
git branch # show branches 
git branch -c experiment # create the experiment branch
git checkout experiment # chekout the experiment branch; then work on it for a while
git commit -a -m "added a cool new feature, but it doesn't quite work" # commit your changes
git checkout master # go back to the master branch, since it still lworks and you need to use it for something.  
#+END_SRC
** Push and Pull
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
When you're working together you may want to *pull* someone else's changes or *push* your own to the group.  
#+BEGIN_SRC  sh
git pull # get the most recent branch of your original repository
git push # send all your commits on the current branch to the original repository
#+END_SRC


OK, that's what I've got for now.  Follow the excellent links near the top for more info.  Good luck!


* COMMENT Back To Wordpress, People!
:PROPERTIES:
:EXPORT_FILE_NAME: back-to-wordpress,-people!
:END:

Well, here we are again, with just a few minutes to go before class and I'm still not sure what we'll be doing exactly!  The point of this week's class is to give you a little push to start (re-)exploring wordpress as you get ready to learn more for your projects.  You already know [[http://2012.hackinghistory.ca/labsnotes/lab-04-getting-started-with-wordpress/][the basics]]: Wordpress is an extensible MS with two main kinds of extensions:

- [[https://wordpress.org/extend/themes/][Themes]], which mostly control the layout, design and presentation of the site, but can have lots of whirligigs and features in addition
- [[https://wordpress.org/extend/plugins/][Plugins]], which add new functions to your site -- such as the ability to add a Twitter feed or use a Google Map

There's also a third category: [[https://codex.wordpress.org/Post_Types#Custom_Types][Custom Post types]], also called Custom Content Types.  These are new categories of data that you define, and instrut Wordpress to handle differently from the default data types (such as posts, pages, and "media").  

To get started, you will want to choose a theme that is close to the layout you're hoping for, and modify it to match your desires.  And you'll have to add functionality by installing new plugins; and when they don't quite do what you ant, we'll have to work together to either modify them or write new ones that do what you want.  

** Themes
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
This is where most of you will want to start -- you want to have a site that can at least display your working data.  Two immediate concerns:
- Backwards compatibility:  any newer themes use features that don't reender well in older browser & on older devices.  You have to decide (1) how important these devices are to you and (2) how you will deal with the incompatibilities (usually by using some kind of "fallback" system.
- Forwards Compatibility:  the web is changing fast and an increasing percentage of web traffic goes through mobile devices -- already in Canada I'm pretty sure it's a majority.  Older websites display quite poorly on these devices.  To work well with these devices you need to work with at least some of the HTML5 & CSS3 features -- like "responsive" design.  

My immediate suggestion to take a look at some of the HTML5, responsive "framework" themes -- these don't have tons of features built-in, but they are built to help you build your own theme the way you want it.  I have a bunch of these installed now, and meant to put a list here but will do so in very short order!  


** Plugins
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
Custom Content Manager
* COMMENT Lab 13: SASS and Wordpress Templates Review
:PROPERTIES:
:EXPORT_FILE_NAME: lab-13-sass-and-wordpress-templates-review
:END:
You will remember that the Wordpress theme we are using, "grunterie", is based on the Foundation web framework and uses SASS for quick and easy modification of CSS.  Today's activities are both a review of what we've already learned, and a a push to get started with some design.  Let's dive right in.

** editing your sass files
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
first, remember how to use your editor.  remember, we have been using [[http://komodoide.com/komodo-edit/][komodo edit]] up to now, and you should still have a shortcut set up that looks something like this:

[[file:~/hackinghistory/images/komodo-prefs.png]] 

notice how i've rewritten the default path -- since you will be doing almost all your work in the grunterie theme, change this to ~/var/www/projectname.hackinghistory.ca/wp-content/themes/grunterie~, where "projectname" is "cabbagetown", "childhood", or "campbell".  

now, open a remote file: 

[[file:~/hackinghistory/images/komodo-open.png]]

the files we want for today are in the ~scss~ directory.  we can also make changes to the ~.php~ files in the theme's main directory, which are the template files ([[http://2014.hackinghistory.ca/lab-05-theming-with-wordpress/][remember this?]]); i'll talk about that a little later.  for now, let's take a quick look at these three files:

- ~scss/_settings.scss~ is where you will do most of your work.  it looks like this:

  [[file:~/hackinghistory/images/settings-scss.png]]

  each line either starts with a comment like  ~// comment~ or a variable declaration like ~$varname : value~.  to change the default styles, change the values of one or more variables.

- ~scss/app.scss~ reads the values from ~_settings.scss~ and uses them to generate complex rules form the much more complicated ~foundation~ stylesheets that are stored in a different place.  you won't edit this.

- ~scss/style.scss~ modifies the final product with a series of rules designed to make foundation fit better with wordpress.  you may change a few of these, too, though that's not all that likely.  

so, you will mostly be working in _settings.scss, at least for now.  let's get started.  

** changing colors
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

you will almost certainly want to change a number of colors in the site in order to get a look-n-feel that approximates your partner's wishes.  the colors in foundation are not as simple as they should be, and some of them can be a pain to hunt down.  here is a partial list though:
- ~$primary-color~ is a light blue by default, and is used for highlighting links and headings (because those are also links), and the background of the search bar and some other elements.
- ~$secondary-color~ is a steel-grey, and is used for a number of backgrounds and some text colors
- ~$alert-color~ is red, and is usually only used if there's some kind of error.
- ~$success-color~ is similarly rarely used
- ~$body-bg~ contorls the background of the off-grid page body -- outside the content area
- ~$body-font-color~ is the main font color (this may be changed a bit in some contexts)
- ~$header-font-color~ is the color non-title headers (titles are links, so are always $primary-color)

there are numerous other color settings but they mostly key off of these "main" colors, or apply only to a few specialized elements.  a slightly outdated list is [[http://f.cl.ly/items/1e0h22242a0n1t1p0r2y/foundation-websmart.html][published here]]; as you can see, most are simple.    

*exercise:* using your mockups, choose a provisional color scheme for your site.  
- *first*, choose a /main color/ that either plays off of the organization logo, or works from a "hero image" of some kind
- then, use an online tool to pick a color scheme (first learn about the [[http://cdn.makeuseof.com/wp-content/uploads/2014/05/commandments-colour.jpg?b9031b][color commandments]]):
  - [[http://colorschemedesigner.com/csd-3.5/][paletton]] is one of the most popular,
  - [[https://color.adobe.com/create/color-wheel/][adobe color cc]] is probably the most widely used, but it's too hard for me
  - [[http://color.hailpixel.com][hailpixel is fun]] and
  - [[http://www.pictaculous.com/][pictaculous]] is a cool way to extract a palette from an image.
- finally, apply your colour scheme to the website by changing some of the color variables we just discussed.

** navigation
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
this theme comes with three navigation menus by default: 
- the primary nav bar, which lives in the top bar
- the utility nav bar, which lives down in the footer
- the "additional" nav bar, which is a dropdown positioned on the very right side of the nav bar and is disabled by default.  you can activate it by removing the comments from lines 70-82 in the ~header.php~ template file, and then add content to it through the wordpress administrative interface.  

it is also possible to create a "off-canvas nav" that swoops out from the left on mobile devices and replaces the top bar on those small screens -- but it takes a little bit of work, so we'll leave the explanation for another day.  

one thing you might want to do is to change the height of the top-bar, at least on large screens.  all the top bar settings are in section "34" of ~_settings.scss~, which starts at around line 1368.  

if you want a fixed or sticky nav bar, this can also be done; you just have to add a ~<div class="fixed">...</div>~ around the nav element in ~header.php~.  

*exercise:* increase the height of the top bar to give it a chunkier feel.  change the background color to something that meshes well with your main site color -- but make sure that text is still easy to read (complementary).  

** grid 
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
most of the grid structure on foundation is great, but sometimes you want to fill the whole screen; this will be especially true if you make heavy use of media, or are going for a particularly contemporary look.  this is easily done by modifying the ~$row-width~ variable, changing it from "rem-calc(1140)" to "100%". do this as an *exercise*, and see if it changes your feelings about the colors.  

** layout
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
the part you've done so far can be very fiddly and time-consuming, but for the most part it isn't technically /difficult/.  a lot of the hard part will getting the pages to look the way you want them to.  this will be fundamentally pretty difficult, and often involve switching back and forth between sass/css and php, because you will need to add html structures for your layout css to grab on to and change.  you may also need to add some custom fields and custom content types -- heavy lifting! -- but we wil lget to that in another session.  

for now, let's try doing a couple of things: 
- make sidebar-less display the default for pages by renaming ~page.php~ to ~page-sidebar.php~ and ~page-full.php~ to ~page.php~.  hmm, can you even do that with komodo? i hope so!
- now let's think about layout.  all of your sites have different needs, but
  1) you will almost all be using pages, and blog posts will be distinctly secondary if present at all; and
  2) when thinking about layout, the most obvious and easiest elements to lay out together are the *main text* and *some kind of image*. wordpress has a ubilt-in feature for highlighting images -- it uses something called the 'featured image" in the admin interface, while in the php code itself it is referred to as the "thumbnail".  unfortunately, by default pages do not have "featured images", so let's fix that real quick.  


*** featured images in themes
:PROPERTIES:
:END:
first, we need to add featured image support to the 'page' content type.  this is the kind of thing that will drive you mad if you don't know how to do it, but is very easy if you do know how.  first, find the file ~functions.php~ and open it.  

on line ~50~ is the code 
#+begin_src php
add_theme_support('post-thumbnails');
#+end_src

simply replace that line with 
#+begin_src php
add_theme_support( 'post-thumbnails', array( 'post', 'page' ) );
#+end_src

ok, that's step one -- we can attach a featured image to a page now; but we haven't added the instructions that will get the featured image to display in our page template.  to do this we will have to open ~content.php~ -- which is the template that actually generates the display of /posts/ -- and find the line that shows the featured image.  it's line 16, actually:

#+begin_quote
<figure><a href="<?php the_permalink(); ?>"><?php if ( has_post_thumbnail() ) {the_post_thumbnail('large'); } ?></a></figure>
#+end_quote

so, we need to put this somewhere in our template.  the queston is, where?  we have a couple of options: 

- we can use "the grid" -- foundation's amazing way of arranging elements on the page; or
- we can instead just float the image /within/ the grid, allowing text to wrap around it.  how you do this is kind of up to you, but will involve some css.

*exercise:* decide which method you want to try, and, with your mockups in front of you, try to get a layout that approximates what you are shooting for.

** further topics
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
we'll see where we get on other topics today -- much will depend on your specific goals.  


  

# hackinghistory/images/komodo-prefs.png http://2014.hackinghistory.ca/wp-content/uploads/2015/01/wpid-komodo-prefs.png
# hackinghistory/images/komodo-open.png http://2014.hackinghistory.ca/wp-content/uploads/2015/01/wpid-komodo-open.png
# hackinghistory/images/settings-scss.png http://2014.hackinghistory.ca/wp-content/uploads/2015/01/wpid-settings-scss.png
* COMMENT Lab 15: Copyright in Digital History
:PROPERTIES:
:EXPORT_FILE_NAME: lab-15-copyright-in-digital-history
:END:
** Some resources:
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Toronto Archives, [[http://www1.toronto.ca/wps/portal/contentonly?vgnextoid%3Da82a757ae6b31410VgnVCM10000071d60f89RCRD&vgnextchannel%3D2ee1226b48c21410VgnVCM10000071d60f89RCRD#photographs][copyright guidelines for researchers]]
- Wikipedia, [[http://en.wikipedia.org/wiki/Fair_dealing_in_Canadian_copyright_law][Fair dealing in Canadian copyright law]]
- [[http://laws-lois.justice.gc.ca/eng/acts/c-42/FullText.html][Copyright Act]]
- [[https://www.cippic.ca/en/FAQ/Photography_Law#How][copyright and privacy in Photography]]
- Michael Geist, [[http://www.michaelgeist.ca/content/view/6695/135/][what the New Copyright Law Means For You]]
- Michael Geist, ed., [[http://www.press.uottawa.ca/sites/default/files/9780776620848.pdf][The Copyright Pentalogy]]
- Creative Commons Canada, [[http://www.lib.sfu.ca/sites/default/files/11695/CanadianPublicDomainFlowchart.pdf][Public Domain Flowchart]]

** The Function of Copyright
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- a contest joining 3 parties
  - authors/creators
  - copyright industries
  - users/public
** Origins of Copyright
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Statue of Anne (1709/10), or "Act for the Encouragement of Learning".
  - usually seen as thinly-veiled protection of the interests of the book trade
- Decret of 19 July 1793, "Declaration of the rights of Genius"
  - transforms pre-revolutionary "Royal Privileges" into /natural rights/ of authors
- Copyright clause of the US constitution (1787)
  - makes most explicit /utilitarian/ claim:
#+BEGIN_QUOTE
To promote the Progress of Science and useful Arts, by securing for limited Times to Authors and Inventors the exclusive Right to their respective Writings and Discoveries. ([[http://en.wikipedia.org/wiki/Copyright_Clause][Article I, Setion 8, Clause 8]])
#+END_QUOTE
(but cf. [[http://papers.ssrn.com/sol3/papers.cfm?abstract_id%3D2206029][Ariel Katz's argument]])
** Enlightenment Values
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Authorship/creativity
- General Good/General Will
- These rights are fundamentally in tension with each other
- But c18 political theory familiar with paradoxes of collective action
  - cf. /Fable of the Bees/, /Wealth of Nations/
** In the Americas
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- US Copyrights limited to American authors
  - an anti-British measure w/ underlying ideology re: freedom of ideas/free societies
- In Canada: emerges from field of public education
** Copyright in Age of Mechanical Reproduction
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Problems of reproduction greatly increase in early c.20 w/ photography, phonograph,film
- Again w/ VHS, Cassette tape
- Greatly increased scope of copyright in US (e.g. 1976 removal of requirement to apply for copyright, repeated increases in term of copyright)
** Digital Issues
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Every act of consumption is a copy
  - which means that the capacity of copyright law to regulate consumption is greatly increased!
- availability of copying/reconstructing far greater
  - (in 1797 not everyone had a printing press!)
** Fair dealing in Canada
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- the "user right" side of the equation.
- no "such as" clause in definition (cf. US)
  - there used to be doubts about whether we have user's rights here.
    - since 2004 though the courts recognize them explicitly
  - 2-part test:
    1. permitted purpose?
    2. fairness criteria met?
  - Web de-institutionalizes many of these practices,
  - C-11 adds 'education' (limited)
** Fair Dealing: Permitted Purposes I
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
1911 UK copyright law lays out permitted purposes (1921 in Canada):
- Research
- Private Study
- criticism
- news reporting
- review
** Fair Dealing: Permitted Purposes II
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
*** 2012 Bill C-11 expands to 3 further purposes:  
- education
- satire
- parody
*** 2013 "Copyright Pentalogy"  
:PROPERTIES:
:END:
- it now appears (after /Alberta (Education)/.and /SOCAN v Bell/) that most purposes are permitted
** Fair Dealing: Criteria of Fairness
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
1. purpose of dealing
2. character of dealing
3. amount of dealing
4. alternatives to dealing
5. nature of the work
6. effect of dealing on the work
** Copyright Terms
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
#+BEGIN_QUOTE
death of the author plus 50 years
#+END_QUOTE
** Photos
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
*** Published before 1949
:PROPERTIES:
:END:
- Public Domain
*** Created before 1949 but never published
:PROPERTIES:
:END:
- Public Domain
*** Published after 1949
:PROPERTIES:
:END:
- life of author + 50
- unless a corporation, in which case, publication +50
** Toronto Archive Photos
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- flickr feed:  most are public domain, despite CC Atttrib license
- in fonds:  license is /not explicit/ and you need to ask permission
** Film
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- complicated, EITHER publication +50 years, or life-of-author + 50
** Text
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- life of author + 50 years, unless unpublished, in which case complex.
** Links
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- embedding of offsite images is /probably/ not copyright violation, but no ruling on that
- not the greatest practice anyway.  
** Implicit permission to publish
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Materials granted to organizations such as CRPM, Campbell House, or the Museum for Childhood, likely imply permission to publish. Burden is on partner organization to ensure they have that permission
** Your Photographs
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- photographs you take of materials are your own property, and you have permission to use them as you wish.
- Reproductions of visual art (posters, etc.) are © the original creator; so, e.g., it is likely legal to reproduce the materials from the walls of the Campbell Museum, given their age.
** Archival Materials
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Materials residing in archival collections are still © the author, so regular copyright term prevails.  However, terms of the grant may permit early access.
- Toronto Archive flickr stream is Creative Commons licensed, so free for you to use.  
** Implications for us
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
- Fair Dealing Exceptions (Research, Education), which is great.
- your case is more convincing if you /analyze/ the document in a way that could not take place without the document being present.  So, using an image or text in an analysis is better than just reproducing them in a gallery.  
- but careful w/ esp. images (no 'parts', so safest to link to externally-hosted images).
  - argument can be made that a low-res image is a "part"; and reproduction of an image from a book or other large work is generally allowed (!) 

* COMMENT Wordpress cruft from old lab 1
 really just an introduction to the website; but since you will be building your own site before the year is out, you'll want to pay attention to the interface.  We use the [[http://wordpress.org][Wordpress]] web framework in this class. Wordpress is the most popular "Content Management System" in the world, and runs ~75 million sites.  It is often praised for the relatively quick learning curve encountered by both users and developers. 

** Registration and First Post
:PROPERTIES:
:ID:       o2b:5a91f103-5faf-4489-8e0d-8003f97bd290
:POST_DATE: [2015-09-10 Thu 11:28]
:BLOG:     dig
:END:
You should receive an email with your site login info shortly before class starts; to log in find the [[http://www.hackinghistory.ca/wp-login.php][admin login page]] and type in your email.  Request a new password and log in.

[[file:Images/wp-admin-interface.png]]

In the "new post" screen write a short post introducing yourself to me and your classmates. Include some of the following:
- What interests you about this class?
- What are you looking forward to/anxious about?
- Is there something unusual about yourself that you're willing to share with the class, that will help us to know you better?  

If you're concerned about privacy, consider restricting access to users of level "author" or higher:

[[file:Images/wp-restrict-post.png]]

 Press "Publish," and /voilà/, you're done.  If you've used Wordpress before, you may still learn something from reading about the [[https://make.wordpress.org/core/2015/08/01/editor-enhancements-in-4-3-%E2%9C%A8/][new structured text improvements]] and the [[https://en.support.wordpress.com/markdown/][advanced Markdown capabilities]].  
                                                                                        
** User Profile
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:

If you want a picture of yourself to appear next to your name (and it would be helpful for me to have one), you can [[https://en.gravatar.com/][create an account at Gravatar]] and upload an image.  Wordpress will automatically link to your gravatar profile.  

** Understanding Wordpress
:PROPERTIES:
:EXPORT_FILE_NAME:
:END:
We will discuss this in more detail in a few weeks; but for now, here is a picture:
[[file:///home/matt/HackingHistory/Handouts/data_and_metadata_on_the_web.png]]

* COMMENT Lab 02: Humans and Machines
:PROPERTIES:
:EXPORT_FILE_NAME: lab-02-humans-and-machines
:END:
Point of today's exercise is to look at how machines and humans interact in the web.  Instead of an assignment, though, we have a graphic...  


# Images/wp-admin-interface.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-wp-admin-interface.png

# Images/wp-restrict-post.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-wp-restrict-post.png
# /home/matt/HackingHistory/Handouts/data_and_metadata_on_the_web.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-data_and_metadata_on_the_web.png

# /home/matt/HackingHistory/Images/wp-file-structure.jpg http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-wp-file-structure.jpg
# /home/matt/HackingHistory/Images/Template_Hierarchy.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-Template_Hierarchy.png

# /home/matt/HackingHistory/Images/nytimes-w-css.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-nytimes-w-css.png
# /home/matt/HackingHistory/Images/nytimes-no-css.png http://2015.hackinghistory.ca/wp-content/uploads/2015/09/wpid-nytimes-no-css.png

# ./Images/github-add-files.png http://2015.hackinghistory.ca/wp-content/uploads/2015/11/wpid-github-add-files.png
# ./Images/github-pull-request.png http://2015.hackinghistory.ca/wp-content/uploads/2015/11/wpid-github-pull-request.png
# ./Images/github-add-project.png http://2015.hackinghistory.ca/wp-content/uploads/2015/11/wpid-github-add-project.png

# ./Images/github-add-file.png http://2015.hackinghistory.ca/wp-content/uploads/2015/11/wpid-github-add-file.png
